/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef scribe_TYPES_H
#define scribe_TYPES_H

#include <iosfwd>

#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/Thrift.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>

namespace opencensus {
namespace scribe {

struct ResultCode {
  enum type { OK = 0, TRY_LATER = 1 };
};

extern const std::map<int, const char*> _ResultCode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ResultCode::type& val);

class LogEntry;

typedef struct _LogEntry__isset {
  _LogEntry__isset() : category(false), message(false) {}
  bool category : 1;
  bool message : 1;
} _LogEntry__isset;

class LogEntry : public virtual ::apache::thrift::TBase {
 public:
  LogEntry(const LogEntry&);
  LogEntry& operator=(const LogEntry&);
  LogEntry() : category(), message() {}

  virtual ~LogEntry() throw();
  std::string category;
  std::string message;

  _LogEntry__isset __isset;

  void __set_category(const std::string& val);

  void __set_message(const std::string& val);

  bool operator==(const LogEntry& rhs) const {
    if (!(category == rhs.category)) return false;
    if (!(message == rhs.message)) return false;
    return true;
  }
  bool operator!=(const LogEntry& rhs) const { return !(*this == rhs); }

  bool operator<(const LogEntry&) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LogEntry& a, LogEntry& b);

std::ostream& operator<<(std::ostream& out, const LogEntry& obj);

}  // namespace scribe
}  // namespace opencensus

#endif
