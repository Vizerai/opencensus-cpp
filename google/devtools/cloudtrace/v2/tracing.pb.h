// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/cloudtrace/v2/tracing.proto

#ifndef PROTOBUF_google_2fdevtools_2fcloudtrace_2fv2_2ftracing_2eproto__INCLUDED
#define PROTOBUF_google_2fdevtools_2fcloudtrace_2fv2_2ftracing_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/message.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/devtools/cloudtrace/v2/trace.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftracing_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable
      serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsBatchWriteSpansRequestImpl();
void InitDefaultsBatchWriteSpansRequest();
inline void InitDefaults() { InitDefaultsBatchWriteSpansRequest(); }
}  // namespace protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftracing_2eproto
namespace google {
namespace devtools {
namespace cloudtrace {
namespace v2 {
class BatchWriteSpansRequest;
class BatchWriteSpansRequestDefaultTypeInternal;
extern BatchWriteSpansRequestDefaultTypeInternal
    _BatchWriteSpansRequest_default_instance_;
}  // namespace v2
}  // namespace cloudtrace
}  // namespace devtools
}  // namespace google
namespace google {
namespace devtools {
namespace cloudtrace {
namespace v2 {

// ===================================================================

class BatchWriteSpansRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.devtools.cloudtrace.v2.BatchWriteSpansRequest)
                                                                   */
{
 public:
  BatchWriteSpansRequest();
  virtual ~BatchWriteSpansRequest();

  BatchWriteSpansRequest(const BatchWriteSpansRequest& from);

  inline BatchWriteSpansRequest& operator=(const BatchWriteSpansRequest& from) {
    CopyFrom(from);
    return *this;
  }
#if LANG_CXX11
  BatchWriteSpansRequest(BatchWriteSpansRequest&& from) noexcept
      : BatchWriteSpansRequest() {
    *this = ::std::move(from);
  }

  inline BatchWriteSpansRequest& operator=(
      BatchWriteSpansRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
#endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchWriteSpansRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchWriteSpansRequest* internal_default_instance() {
    return reinterpret_cast<const BatchWriteSpansRequest*>(
        &_BatchWriteSpansRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages = 0;

  void Swap(BatchWriteSpansRequest* other);
  friend void swap(BatchWriteSpansRequest& a, BatchWriteSpansRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatchWriteSpansRequest* New() const PROTOBUF_FINAL {
    return New(NULL);
  }

  BatchWriteSpansRequest* New(::google::protobuf::Arena* arena) const
      PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BatchWriteSpansRequest& from);
  void MergeFrom(const BatchWriteSpansRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic,
      ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BatchWriteSpansRequest* other);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
  inline void* MaybeArenaPtr() const { return NULL; }

 public:
  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.devtools.cloudtrace.v2.Span spans = 2;
  int spans_size() const;
  void clear_spans();
  static const int kSpansFieldNumber = 2;
  const ::google::devtools::cloudtrace::v2::Span& spans(int index) const;
  ::google::devtools::cloudtrace::v2::Span* mutable_spans(int index);
  ::google::devtools::cloudtrace::v2::Span* add_spans();
  ::google::protobuf::RepeatedPtrField<
      ::google::devtools::cloudtrace::v2::Span>*
  mutable_spans();
  const ::google::protobuf::RepeatedPtrField<
      ::google::devtools::cloudtrace::v2::Span>&
  spans() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
#if LANG_CXX11
  void set_name(::std::string&& value);
#endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.devtools.cloudtrace.v2.BatchWriteSpansRequest)
 private:
  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<
      ::google::devtools::cloudtrace::v2::Span>
      spans_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::
      protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftracing_2eproto::
          TableStruct;
  friend void ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftracing_2eproto::
      InitDefaultsBatchWriteSpansRequestImpl();
};
// ===================================================================

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BatchWriteSpansRequest

// string name = 1;
inline void BatchWriteSpansRequest::clear_name() {
  name_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BatchWriteSpansRequest::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.BatchWriteSpansRequest.name)
  return name_.GetNoArena();
}
inline void BatchWriteSpansRequest::set_name(const ::std::string& value) {
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                   value);
  // @@protoc_insertion_point(field_set:google.devtools.cloudtrace.v2.BatchWriteSpansRequest.name)
}
#if LANG_CXX11
inline void BatchWriteSpansRequest::set_name(::std::string&& value) {
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                   ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.cloudtrace.v2.BatchWriteSpansRequest.name)
}
#endif
inline void BatchWriteSpansRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);

  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                   ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.devtools.cloudtrace.v2.BatchWriteSpansRequest.name)
}
inline void BatchWriteSpansRequest::set_name(const char* value, size_t size) {
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                   ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.devtools.cloudtrace.v2.BatchWriteSpansRequest.name)
}
inline ::std::string* BatchWriteSpansRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v2.BatchWriteSpansRequest.name)
  return name_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BatchWriteSpansRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.cloudtrace.v2.BatchWriteSpansRequest.name)

  return name_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BatchWriteSpansRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
  } else {
  }
  name_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v2.BatchWriteSpansRequest.name)
}

// repeated .google.devtools.cloudtrace.v2.Span spans = 2;
inline int BatchWriteSpansRequest::spans_size() const { return spans_.size(); }
inline const ::google::devtools::cloudtrace::v2::Span&
BatchWriteSpansRequest::spans(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.cloudtrace.v2.BatchWriteSpansRequest.spans)
  return spans_.Get(index);
}
inline ::google::devtools::cloudtrace::v2::Span*
BatchWriteSpansRequest::mutable_spans(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.cloudtrace.v2.BatchWriteSpansRequest.spans)
  return spans_.Mutable(index);
}
inline ::google::devtools::cloudtrace::v2::Span*
BatchWriteSpansRequest::add_spans() {
  // @@protoc_insertion_point(field_add:google.devtools.cloudtrace.v2.BatchWriteSpansRequest.spans)
  return spans_.Add();
}
inline ::google::protobuf::RepeatedPtrField<
    ::google::devtools::cloudtrace::v2::Span>*
BatchWriteSpansRequest::mutable_spans() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.cloudtrace.v2.BatchWriteSpansRequest.spans)
  return &spans_;
}
inline const ::google::protobuf::RepeatedPtrField<
    ::google::devtools::cloudtrace::v2::Span>&
BatchWriteSpansRequest::spans() const {
  // @@protoc_insertion_point(field_list:google.devtools.cloudtrace.v2.BatchWriteSpansRequest.spans)
  return spans_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace cloudtrace
}  // namespace devtools
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fdevtools_2fcloudtrace_2fv2_2ftracing_2eproto__INCLUDED
