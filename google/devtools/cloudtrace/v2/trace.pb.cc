// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/cloudtrace/v2/trace.proto

#include "google/devtools/cloudtrace/v2/trace.pb.h"

#include <algorithm>

#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format.h>
#include <google/protobuf/wire_format_lite_inl.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace google {
namespace devtools {
namespace cloudtrace {
namespace v2 {
class Span_Attributes_AttributeMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<
      Span_Attributes_AttributeMapEntry_DoNotUse>
      _instance;
} _Span_Attributes_AttributeMapEntry_DoNotUse_default_instance_;
class Span_AttributesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Span_Attributes>
      _instance;
} _Span_Attributes_default_instance_;
class Span_TimeEvent_AnnotationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Span_TimeEvent_Annotation>
      _instance;
} _Span_TimeEvent_Annotation_default_instance_;
class Span_TimeEvent_MessageEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<
      Span_TimeEvent_MessageEvent>
      _instance;
} _Span_TimeEvent_MessageEvent_default_instance_;
class Span_TimeEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Span_TimeEvent> _instance;
  const ::google::devtools::cloudtrace::v2::Span_TimeEvent_Annotation*
      annotation_;
  const ::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent*
      message_event_;
} _Span_TimeEvent_default_instance_;
class Span_TimeEventsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Span_TimeEvents>
      _instance;
} _Span_TimeEvents_default_instance_;
class Span_LinkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Span_Link> _instance;
} _Span_Link_default_instance_;
class Span_LinksDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Span_Links> _instance;
} _Span_Links_default_instance_;
class SpanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Span> _instance;
} _Span_default_instance_;
class AttributeValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AttributeValue> _instance;
  const ::google::devtools::cloudtrace::v2::TruncatableString* string_value_;
  ::google::protobuf::int64 int_value_;
  bool bool_value_;
} _AttributeValue_default_instance_;
class StackTrace_StackFrameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StackTrace_StackFrame>
      _instance;
} _StackTrace_StackFrame_default_instance_;
class StackTrace_StackFramesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StackTrace_StackFrames>
      _instance;
} _StackTrace_StackFrames_default_instance_;
class StackTraceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StackTrace> _instance;
} _StackTrace_default_instance_;
class ModuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Module> _instance;
} _Module_default_instance_;
class TruncatableStringDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TruncatableString>
      _instance;
} _TruncatableString_default_instance_;
}  // namespace v2
}  // namespace cloudtrace
}  // namespace devtools
}  // namespace google
namespace protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto {
void InitDefaultsSpan_Attributes_AttributeMapEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      InitDefaultsAttributeValue();
  {
    void* ptr =
        &::google::devtools::cloudtrace::v2::
            _Span_Attributes_AttributeMapEntry_DoNotUse_default_instance_;
    new (ptr)::google::devtools::cloudtrace::v2::
        Span_Attributes_AttributeMapEntry_DoNotUse();
  }
  ::google::devtools::cloudtrace::v2::
      Span_Attributes_AttributeMapEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsSpan_Attributes_AttributeMapEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(
      &once, &InitDefaultsSpan_Attributes_AttributeMapEntry_DoNotUseImpl);
}

void InitDefaultsSpan_AttributesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      InitDefaultsSpan_Attributes_AttributeMapEntry_DoNotUse();
  {
    void* ptr =
        &::google::devtools::cloudtrace::v2::_Span_Attributes_default_instance_;
    new (ptr)::google::devtools::cloudtrace::v2::Span_Attributes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::devtools::cloudtrace::v2::Span_Attributes::InitAsDefaultInstance();
}

void InitDefaultsSpan_Attributes() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSpan_AttributesImpl);
}

void InitDefaultsSpan_TimeEvent_AnnotationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      InitDefaultsTruncatableString();
  protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      InitDefaultsSpan_Attributes();
  {
    void* ptr = &::google::devtools::cloudtrace::v2::
                    _Span_TimeEvent_Annotation_default_instance_;
    new (ptr)::google::devtools::cloudtrace::v2::Span_TimeEvent_Annotation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::devtools::cloudtrace::v2::Span_TimeEvent_Annotation::
      InitAsDefaultInstance();
}

void InitDefaultsSpan_TimeEvent_Annotation() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(
      &once, &InitDefaultsSpan_TimeEvent_AnnotationImpl);
}

void InitDefaultsSpan_TimeEvent_MessageEventImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::devtools::cloudtrace::v2::
                    _Span_TimeEvent_MessageEvent_default_instance_;
    new (ptr)::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent::
      InitAsDefaultInstance();
}

void InitDefaultsSpan_TimeEvent_MessageEvent() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(
      &once, &InitDefaultsSpan_TimeEvent_MessageEventImpl);
}

void InitDefaultsSpan_TimeEventImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaultsTimestamp();
  protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      InitDefaultsSpan_TimeEvent_Annotation();
  protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      InitDefaultsSpan_TimeEvent_MessageEvent();
  {
    void* ptr =
        &::google::devtools::cloudtrace::v2::_Span_TimeEvent_default_instance_;
    new (ptr)::google::devtools::cloudtrace::v2::Span_TimeEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::devtools::cloudtrace::v2::Span_TimeEvent::InitAsDefaultInstance();
}

void InitDefaultsSpan_TimeEvent() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSpan_TimeEventImpl);
}

void InitDefaultsSpan_TimeEventsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      InitDefaultsSpan_TimeEvent();
  {
    void* ptr =
        &::google::devtools::cloudtrace::v2::_Span_TimeEvents_default_instance_;
    new (ptr)::google::devtools::cloudtrace::v2::Span_TimeEvents();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::devtools::cloudtrace::v2::Span_TimeEvents::InitAsDefaultInstance();
}

void InitDefaultsSpan_TimeEvents() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSpan_TimeEventsImpl);
}

void InitDefaultsSpan_LinkImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      InitDefaultsSpan_Attributes();
  {
    void* ptr =
        &::google::devtools::cloudtrace::v2::_Span_Link_default_instance_;
    new (ptr)::google::devtools::cloudtrace::v2::Span_Link();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::devtools::cloudtrace::v2::Span_Link::InitAsDefaultInstance();
}

void InitDefaultsSpan_Link() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSpan_LinkImpl);
}

void InitDefaultsSpan_LinksImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      InitDefaultsSpan_Link();
  {
    void* ptr =
        &::google::devtools::cloudtrace::v2::_Span_Links_default_instance_;
    new (ptr)::google::devtools::cloudtrace::v2::Span_Links();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::devtools::cloudtrace::v2::Span_Links::InitAsDefaultInstance();
}

void InitDefaultsSpan_Links() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSpan_LinksImpl);
}

void InitDefaultsSpanImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      InitDefaultsTruncatableString();
  protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaultsTimestamp();
  protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      InitDefaultsSpan_Attributes();
  protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      InitDefaultsStackTrace();
  protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      InitDefaultsSpan_TimeEvents();
  protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      InitDefaultsSpan_Links();
  protobuf_google_2frpc_2fstatus_2eproto::InitDefaultsStatus();
  protobuf_google_2fprotobuf_2fwrappers_2eproto::InitDefaultsBoolValue();
  protobuf_google_2fprotobuf_2fwrappers_2eproto::InitDefaultsInt32Value();
  {
    void* ptr = &::google::devtools::cloudtrace::v2::_Span_default_instance_;
    new (ptr)::google::devtools::cloudtrace::v2::Span();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::devtools::cloudtrace::v2::Span::InitAsDefaultInstance();
}

void InitDefaultsSpan() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSpanImpl);
}

void InitDefaultsAttributeValueImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      InitDefaultsTruncatableString();
  {
    void* ptr =
        &::google::devtools::cloudtrace::v2::_AttributeValue_default_instance_;
    new (ptr)::google::devtools::cloudtrace::v2::AttributeValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::devtools::cloudtrace::v2::AttributeValue::InitAsDefaultInstance();
}

void InitDefaultsAttributeValue() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAttributeValueImpl);
}

void InitDefaultsStackTrace_StackFrameImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      InitDefaultsTruncatableString();
  protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      InitDefaultsModule();
  {
    void* ptr = &::google::devtools::cloudtrace::v2::
                    _StackTrace_StackFrame_default_instance_;
    new (ptr)::google::devtools::cloudtrace::v2::StackTrace_StackFrame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::devtools::cloudtrace::v2::StackTrace_StackFrame::
      InitAsDefaultInstance();
}

void InitDefaultsStackTrace_StackFrame() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once,
                                     &InitDefaultsStackTrace_StackFrameImpl);
}

void InitDefaultsStackTrace_StackFramesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      InitDefaultsStackTrace_StackFrame();
  {
    void* ptr = &::google::devtools::cloudtrace::v2::
                    _StackTrace_StackFrames_default_instance_;
    new (ptr)::google::devtools::cloudtrace::v2::StackTrace_StackFrames();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::devtools::cloudtrace::v2::StackTrace_StackFrames::
      InitAsDefaultInstance();
}

void InitDefaultsStackTrace_StackFrames() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once,
                                     &InitDefaultsStackTrace_StackFramesImpl);
}

void InitDefaultsStackTraceImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      InitDefaultsStackTrace_StackFrames();
  {
    void* ptr =
        &::google::devtools::cloudtrace::v2::_StackTrace_default_instance_;
    new (ptr)::google::devtools::cloudtrace::v2::StackTrace();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::devtools::cloudtrace::v2::StackTrace::InitAsDefaultInstance();
}

void InitDefaultsStackTrace() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStackTraceImpl);
}

void InitDefaultsModuleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      InitDefaultsTruncatableString();
  {
    void* ptr = &::google::devtools::cloudtrace::v2::_Module_default_instance_;
    new (ptr)::google::devtools::cloudtrace::v2::Module();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::devtools::cloudtrace::v2::Module::InitAsDefaultInstance();
}

void InitDefaultsModule() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsModuleImpl);
}

void InitDefaultsTruncatableStringImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::devtools::cloudtrace::v2::
                    _TruncatableString_default_instance_;
    new (ptr)::google::devtools::cloudtrace::v2::TruncatableString();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::devtools::cloudtrace::v2::TruncatableString::
      InitAsDefaultInstance();
}

void InitDefaultsTruncatableString() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTruncatableStringImpl);
}

::google::protobuf::Metadata file_level_metadata[15];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32
    TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::
                Span_Attributes_AttributeMapEntry_DoNotUse,
            _has_bits_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::
                Span_Attributes_AttributeMapEntry_DoNotUse,
            _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::
                Span_Attributes_AttributeMapEntry_DoNotUse,
            key_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::
                Span_Attributes_AttributeMapEntry_DoNotUse,
            value_),
        0,
        1,
        ~0u,  // no _has_bits_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span_Attributes,
            _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span_Attributes,
            attribute_map_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span_Attributes,
            dropped_attributes_count_),
        ~0u,  // no _has_bits_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span_TimeEvent_Annotation,
            _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span_TimeEvent_Annotation,
            description_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span_TimeEvent_Annotation,
            attributes_),
        ~0u,  // no _has_bits_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent,
            _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent,
            type_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent,
            id_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent,
            uncompressed_size_bytes_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent,
            compressed_size_bytes_),
        ~0u,  // no _has_bits_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span_TimeEvent,
            _internal_metadata_),
        ~0u,  // no _extensions_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span_TimeEvent,
            _oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span_TimeEvent, time_),
        offsetof(::google::devtools::cloudtrace::v2::
                     Span_TimeEventDefaultTypeInternal,
                 annotation_),
        offsetof(::google::devtools::cloudtrace::v2::
                     Span_TimeEventDefaultTypeInternal,
                 message_event_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span_TimeEvent, value_),
        ~0u,  // no _has_bits_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span_TimeEvents,
            _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span_TimeEvents, time_event_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span_TimeEvents,
            dropped_annotations_count_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span_TimeEvents,
            dropped_message_events_count_),
        ~0u,  // no _has_bits_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span_Link, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span_Link, trace_id_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span_Link, span_id_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span_Link, type_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span_Link, attributes_),
        ~0u,  // no _has_bits_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span_Links,
            _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span_Links, link_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span_Links,
            dropped_links_count_),
        ~0u,  // no _has_bits_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span, name_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span, span_id_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span, parent_span_id_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span, display_name_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span, start_time_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span, end_time_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span, attributes_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span, stack_trace_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span, time_events_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span, links_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span, status_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span,
            same_process_as_parent_span_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Span, child_span_count_),
        ~0u,  // no _has_bits_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::AttributeValue,
            _internal_metadata_),
        ~0u,  // no _extensions_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::AttributeValue,
            _oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        offsetof(::google::devtools::cloudtrace::v2::
                     AttributeValueDefaultTypeInternal,
                 string_value_),
        offsetof(::google::devtools::cloudtrace::v2::
                     AttributeValueDefaultTypeInternal,
                 int_value_),
        offsetof(::google::devtools::cloudtrace::v2::
                     AttributeValueDefaultTypeInternal,
                 bool_value_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::AttributeValue, value_),
        ~0u,  // no _has_bits_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::StackTrace_StackFrame,
            _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::StackTrace_StackFrame,
            function_name_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::StackTrace_StackFrame,
            original_function_name_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::StackTrace_StackFrame,
            file_name_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::StackTrace_StackFrame,
            line_number_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::StackTrace_StackFrame,
            column_number_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::StackTrace_StackFrame,
            load_module_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::StackTrace_StackFrame,
            source_version_),
        ~0u,  // no _has_bits_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::StackTrace_StackFrames,
            _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::StackTrace_StackFrames, frame_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::StackTrace_StackFrames,
            dropped_frames_count_),
        ~0u,  // no _has_bits_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::StackTrace,
            _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::StackTrace, stack_frames_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::StackTrace,
            stack_trace_hash_id_),
        ~0u,  // no _has_bits_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Module, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Module, module_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::Module, build_id_),
        ~0u,  // no _has_bits_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::TruncatableString,
            _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::TruncatableString, value_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::TruncatableString,
            truncated_byte_count_),
};
static const ::google::protobuf::internal::MigrationSchema
    schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 7,
         sizeof(::google::devtools::cloudtrace::v2::
                    Span_Attributes_AttributeMapEntry_DoNotUse)},
        {9, -1, sizeof(::google::devtools::cloudtrace::v2::Span_Attributes)},
        {16, -1,
         sizeof(::google::devtools::cloudtrace::v2::Span_TimeEvent_Annotation)},
        {23, -1,
         sizeof(
             ::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent)},
        {32, -1, sizeof(::google::devtools::cloudtrace::v2::Span_TimeEvent)},
        {41, -1, sizeof(::google::devtools::cloudtrace::v2::Span_TimeEvents)},
        {49, -1, sizeof(::google::devtools::cloudtrace::v2::Span_Link)},
        {58, -1, sizeof(::google::devtools::cloudtrace::v2::Span_Links)},
        {65, -1, sizeof(::google::devtools::cloudtrace::v2::Span)},
        {83, -1, sizeof(::google::devtools::cloudtrace::v2::AttributeValue)},
        {92, -1,
         sizeof(::google::devtools::cloudtrace::v2::StackTrace_StackFrame)},
        {104, -1,
         sizeof(::google::devtools::cloudtrace::v2::StackTrace_StackFrames)},
        {111, -1, sizeof(::google::devtools::cloudtrace::v2::StackTrace)},
        {118, -1, sizeof(::google::devtools::cloudtrace::v2::Module)},
        {125, -1,
         sizeof(::google::devtools::cloudtrace::v2::TruncatableString)},
};

static ::google::protobuf::Message const* const file_default_instances[] = {
    reinterpret_cast<const ::google::protobuf::Message*>(
        &::google::devtools::cloudtrace::v2::
            _Span_Attributes_AttributeMapEntry_DoNotUse_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(
        &::google::devtools::cloudtrace::v2::
            _Span_Attributes_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(
        &::google::devtools::cloudtrace::v2::
            _Span_TimeEvent_Annotation_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(
        &::google::devtools::cloudtrace::v2::
            _Span_TimeEvent_MessageEvent_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(
        &::google::devtools::cloudtrace::v2::_Span_TimeEvent_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(
        &::google::devtools::cloudtrace::v2::
            _Span_TimeEvents_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(
        &::google::devtools::cloudtrace::v2::_Span_Link_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(
        &::google::devtools::cloudtrace::v2::_Span_Links_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(
        &::google::devtools::cloudtrace::v2::_Span_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(
        &::google::devtools::cloudtrace::v2::_AttributeValue_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(
        &::google::devtools::cloudtrace::v2::
            _StackTrace_StackFrame_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(
        &::google::devtools::cloudtrace::v2::
            _StackTrace_StackFrames_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(
        &::google::devtools::cloudtrace::v2::_StackTrace_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(
        &::google::devtools::cloudtrace::v2::_Module_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message*>(
        &::google::devtools::cloudtrace::v2::
            _TruncatableString_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors("google/devtools/cloudtrace/v2/trace.proto", schemas,
                    file_default_instances, TableStruct::offsets, factory,
                    file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&)
    GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 15);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(
      protodesc_cold) = {
      "\n)google/devtools/cloudtrace/v2/trace.pr"
      "oto\022\035google.devtools.cloudtrace.v2\032\034goog"
      "le/api/annotations.proto\032\037google/protobu"
      "f/timestamp.proto\032\036google/protobuf/wrapp"
      "ers.proto\032\027google/rpc/status.proto\"\305\017\n\004S"
      "pan\022\014\n\004name\030\001 \001(\t\022\017\n\007span_id\030\002 "
      "\001(\t\022\026\n\016pa"
      "rent_span_id\030\003 \001(\t\022F\n\014display_name\030\004 \001(\013"
      "20.google.devtools.cloudtrace.v2.Truncat"
      "ableString\022.\n\nstart_time\030\005 \001(\0132\032.google."
      "protobuf.Timestamp\022,\n\010end_time\030\006 \001(\0132\032.g"
      "oogle.protobuf.Timestamp\022B\n\nattributes\030\007"
      " \001(\0132..google.devtools.cloudtrace.v2.Spa"
      "n.Attributes\022>\n\013stack_trace\030\010 \001(\0132).goog"
      "le.devtools.cloudtrace.v2.StackTrace\022C\n\013"
      "time_events\030\t \001(\0132..google.devtools.clou"
      "dtrace.v2.Span.TimeEvents\0228\n\005links\030\n \001(\013"
      "2).google.devtools.cloudtrace.v2.Span.Li"
      "nks\022\"\n\006status\030\013 \001(\0132\022.google.rpc.Status\022"
      "\?\n\033same_process_as_parent_span\030\014 \001(\0132\032.g"
      "oogle.protobuf.BoolValue\0225\n\020child_span_c"
      "ount\030\r \001(\0132\033.google.protobuf.Int32Value\032"
      "\353\001\n\nAttributes\022W\n\rattribute_map\030\001 \003(\0132@."
      "google.devtools.cloudtrace.v2.Span.Attri"
      "butes.AttributeMapEntry\022 \n\030dropped_attri"
      "butes_count\030\002 \001(\005\032b\n\021AttributeMapEntry\022\013"
      "\n\003key\030\001 \001(\t\022<\n\005value\030\002 "
      "\001(\0132-.google.devt"
      "ools.cloudtrace.v2.AttributeValue:\0028\001\032\337\004"
      "\n\tTimeEvent\022(\n\004time\030\001 \001(\0132\032.google.proto"
      "buf.Timestamp\022N\n\nannotation\030\002 \001(\01328.goog"
      "le.devtools.cloudtrace.v2.Span.TimeEvent"
      ".AnnotationH\000\022S\n\rmessage_event\030\003 \001(\0132:.g"
      "oogle.devtools.cloudtrace.v2.Span.TimeEv"
      "ent.MessageEventH\000\032\227\001\n\nAnnotation\022E\n\013des"
      "cription\030\001 \001(\01320.google.devtools.cloudtr"
      "ace.v2.TruncatableString\022B\n\nattributes\030\002"
      " \001(\0132..google.devtools.cloudtrace.v2.Spa"
      "n.Attributes\032\337\001\n\014MessageEvent\022M\n\004type\030\001 "
      "\001(\0162\?.google.devtools.cloudtrace.v2.Span"
      ".TimeEvent.MessageEvent.Type\022\n\n\002id\030\002 \001(\003"
      "\022\037\n\027uncompressed_size_bytes\030\003 \001(\003\022\035\n\025com"
      "pressed_size_bytes\030\004 \001(\003\"4\n\004Type\022\024\n\020TYPE"
      "_UNSPECIFIED\020\000\022\010\n\004SENT\020\001\022\014\n\010RECEIVED\020"
      "\002B\007"
      "\n\005value\032\230\001\n\nTimeEvents\022A\n\ntime_event\030\001 \003"
      "(\0132-.google.devtools.cloudtrace.v2.Span."
      "TimeEvent\022!\n\031dropped_annotations_count\030\002"
      " \001(\005\022$\n\034dropped_message_events_count\030\003 \001"
      "(\005\032\367\001\n\004Link\022\020\n\010trace_id\030\001 "
      "\001(\t\022\017\n\007span_id"
      "\030\002 \001(\t\022;\n\004type\030\003 \001(\0162-.google.devtools.c"
      "loudtrace.v2.Span.Link.Type\022B\n\nattribute"
      "s\030\004 \001(\0132..google.devtools.cloudtrace.v2."
      "Span.Attributes\"K\n\004Type\022\024\n\020TYPE_UNSPECIF"
      "IED\020\000\022\025\n\021CHILD_LINKED_SPAN\020\001\022\026\n\022PARENT_L"
      "INKED_SPAN\020\002\032\\\n\005Links\0226\n\004link\030\001 "
      "\003(\0132(.go"
      "ogle.devtools.cloudtrace.v2.Span.Link\022\033\n"
      "\023dropped_links_count\030\002 \001(\005\"\216\001\n\016Attribute"
      "Value\022H\n\014string_value\030\001 \001(\01320.google.dev"
      "tools.cloudtrace.v2.TruncatableStringH\000\022"
      "\023\n\tint_value\030\002 \001(\003H\000\022\024\n\nbool_value\030\003 "
      "\001(\010"
      "H\000B\007\n\005value\"\211\005\n\nStackTrace\022K\n\014stack_fram"
      "es\030\001 \001(\01325.google.devtools.cloudtrace.v2"
      ".StackTrace.StackFrames\022\033\n\023stack_trace_h"
      "ash_id\030\002 \001(\003\032\236\003\n\nStackFrame\022G\n\rfunction_"
      "name\030\001 \001(\01320.google.devtools.cloudtrace."
      "v2.TruncatableString\022P\n\026original_functio"
      "n_name\030\002 \001(\01320.google.devtools.cloudtrac"
      "e.v2.TruncatableString\022C\n\tfile_name\030\003 \001("
      "\01320.google.devtools.cloudtrace.v2.Trunca"
      "tableString\022\023\n\013line_number\030\004 \001(\003\022\025\n\rcolu"
      "mn_number\030\005 \001(\003\022:\n\013load_module\030\006 \001(\0132%.g"
      "oogle.devtools.cloudtrace.v2.Module\022H\n\016s"
      "ource_version\030\007 \001(\01320.google.devtools.cl"
      "oudtrace.v2.TruncatableString\032p\n\013StackFr"
      "ames\022C\n\005frame\030\001 \003(\01324.google.devtools.cl"
      "oudtrace.v2.StackTrace.StackFrame\022\034\n\024dro"
      "pped_frames_count\030\002 \001(\005\"\216\001\n\006Module\022@\n\006mo"
      "dule\030\001 \001(\01320.google.devtools.cloudtrace."
      "v2.TruncatableString\022B\n\010build_id\030\002 \001(\01320"
      ".google.devtools.cloudtrace.v2.Truncatab"
      "leString\"@\n\021TruncatableString\022\r\n\005value\030\001"
      " \001(\t\022\034\n\024truncated_byte_count\030\002 "
      "\001(\005B\252\001\n!c"
      "om.google.devtools.cloudtrace.v2B\nTraceP"
      "rotoP\001ZGgoogle.golang.org/genproto/googl"
      "eapis/devtools/cloudtrace/v2;cloudtrace\252"
      "\002\025Google.Cloud.Trace.V2\312\002\025Google\\Cloud\\T"
      "race\\V2b\006proto3"};
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(descriptor,
                                                               3375);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
      "google/devtools/cloudtrace/v2/trace.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
  ::protobuf_google_2frpc_2fstatus_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() { AddDescriptors(); }
} static_descriptor_initializer;
}  // namespace protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto
namespace google {
namespace devtools {
namespace cloudtrace {
namespace v2 {
const ::google::protobuf::EnumDescriptor*
Span_TimeEvent_MessageEvent_Type_descriptor() {
  protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      file_level_enum_descriptors[0];
}
bool Span_TimeEvent_MessageEvent_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Span_TimeEvent_MessageEvent_Type
    Span_TimeEvent_MessageEvent::TYPE_UNSPECIFIED;
const Span_TimeEvent_MessageEvent_Type Span_TimeEvent_MessageEvent::SENT;
const Span_TimeEvent_MessageEvent_Type Span_TimeEvent_MessageEvent::RECEIVED;
const Span_TimeEvent_MessageEvent_Type Span_TimeEvent_MessageEvent::Type_MIN;
const Span_TimeEvent_MessageEvent_Type Span_TimeEvent_MessageEvent::Type_MAX;
const int Span_TimeEvent_MessageEvent::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Span_Link_Type_descriptor() {
  protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      file_level_enum_descriptors[1];
}
bool Span_Link_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Span_Link_Type Span_Link::TYPE_UNSPECIFIED;
const Span_Link_Type Span_Link::CHILD_LINKED_SPAN;
const Span_Link_Type Span_Link::PARENT_LINKED_SPAN;
const Span_Link_Type Span_Link::Type_MIN;
const Span_Link_Type Span_Link::Type_MAX;
const int Span_Link::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

Span_Attributes_AttributeMapEntry_DoNotUse::
    Span_Attributes_AttributeMapEntry_DoNotUse() {}
Span_Attributes_AttributeMapEntry_DoNotUse::
    Span_Attributes_AttributeMapEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void Span_Attributes_AttributeMapEntry_DoNotUse::MergeFrom(
    const Span_Attributes_AttributeMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata
Span_Attributes_AttributeMapEntry_DoNotUse::GetMetadata() const {
  ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      file_level_metadata[0];
}
void Span_Attributes_AttributeMapEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

// ===================================================================

void Span_Attributes::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Span_Attributes::kAttributeMapFieldNumber;
const int Span_Attributes::kDroppedAttributesCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Span_Attributes::Span_Attributes()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
        InitDefaultsSpan_Attributes();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.devtools.cloudtrace.v2.Span.Attributes)
}
Span_Attributes::Span_Attributes(const Span_Attributes& from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attribute_map_.MergeFrom(from.attribute_map_);
  dropped_attributes_count_ = from.dropped_attributes_count_;
  // @@protoc_insertion_point(copy_constructor:google.devtools.cloudtrace.v2.Span.Attributes)
}

void Span_Attributes::SharedCtor() {
  dropped_attributes_count_ = 0;
  _cached_size_ = 0;
}

Span_Attributes::~Span_Attributes() {
  // @@protoc_insertion_point(destructor:google.devtools.cloudtrace.v2.Span.Attributes)
  SharedDtor();
}

void Span_Attributes::SharedDtor() {}

void Span_Attributes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Span_Attributes::descriptor() {
  ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      file_level_metadata[kIndexInFileMessages]
          .descriptor;
}

const Span_Attributes& Span_Attributes::default_instance() {
  ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      InitDefaultsSpan_Attributes();
  return *internal_default_instance();
}

Span_Attributes* Span_Attributes::New(::google::protobuf::Arena* arena) const {
  Span_Attributes* n = new Span_Attributes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Span_Attributes::Clear() {
  // @@protoc_insertion_point(message_clear_start:google.devtools.cloudtrace.v2.Span.Attributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  attribute_map_.Clear();
  dropped_attributes_count_ = 0;
  _internal_metadata_.Clear();
}

bool Span_Attributes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.devtools.cloudtrace.v2.Span.Attributes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .google.devtools.cloudtrace.v2.AttributeValue>
      // attribute_map = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          Span_Attributes_AttributeMapEntry_DoNotUse::Parser<
              ::google::protobuf::internal::MapField<
                  Span_Attributes_AttributeMapEntry_DoNotUse, ::std::string,
                  ::google::devtools::cloudtrace::v2::AttributeValue,
                  ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                  ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
                  0>,
              ::google::protobuf::Map<
                  ::std::string,
                  ::google::devtools::cloudtrace::v2::AttributeValue> >
              parser(&attribute_map_);
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              parser.key().data(), static_cast<int>(parser.key().length()),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "google.devtools.cloudtrace.v2.Span.Attributes.AttributeMapEntry."
              "key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dropped_attributes_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::int32,
               ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &dropped_attributes_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.devtools.cloudtrace.v2.Span.Attributes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.devtools.cloudtrace.v2.Span.Attributes)
  return false;
#undef DO_
}

void Span_Attributes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.devtools.cloudtrace.v2.Span.Attributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // map<string, .google.devtools.cloudtrace.v2.AttributeValue> attribute_map =
  // 1;
  if (!this->attribute_map().empty()) {
    typedef ::google::protobuf::Map<
        ::std::string,
        ::google::devtools::cloudtrace::v2::AttributeValue>::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            p->first.data(), static_cast<int>(p->first.length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "google.devtools.cloudtrace.v2.Span.Attributes.AttributeMapEntry."
            "key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->attribute_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->attribute_map().size()]);
      typedef ::google::protobuf::Map<
          ::std::string,
          ::google::devtools::cloudtrace::v2::AttributeValue>::size_type
          size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string,
                                    ::google::devtools::cloudtrace::v2::
                                        AttributeValue>::const_iterator it =
               this->attribute_map().begin();
           it != this->attribute_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Span_Attributes_AttributeMapEntry_DoNotUse>
          entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attribute_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first,
            items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Span_Attributes_AttributeMapEntry_DoNotUse>
          entry;
      for (::google::protobuf::Map< ::std::string,
                                    ::google::devtools::cloudtrace::v2::
                                        AttributeValue>::const_iterator it =
               this->attribute_map().begin();
           it != this->attribute_map().end(); ++it) {
        entry.reset(attribute_map_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // int32 dropped_attributes_count = 2;
  if (this->dropped_attributes_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        2, this->dropped_attributes_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
             ? _internal_metadata_.unknown_fields()
             : _internal_metadata_.default_instance()),
        output);
  }
  // @@protoc_insertion_point(serialize_end:google.devtools.cloudtrace.v2.Span.Attributes)
}

::google::protobuf::uint8*
Span_Attributes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.devtools.cloudtrace.v2.Span.Attributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // map<string, .google.devtools.cloudtrace.v2.AttributeValue> attribute_map =
  // 1;
  if (!this->attribute_map().empty()) {
    typedef ::google::protobuf::Map<
        ::std::string,
        ::google::devtools::cloudtrace::v2::AttributeValue>::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            p->first.data(), static_cast<int>(p->first.length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "google.devtools.cloudtrace.v2.Span.Attributes.AttributeMapEntry."
            "key");
      }
    };

    if (deterministic && this->attribute_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->attribute_map().size()]);
      typedef ::google::protobuf::Map<
          ::std::string,
          ::google::devtools::cloudtrace::v2::AttributeValue>::size_type
          size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string,
                                    ::google::devtools::cloudtrace::v2::
                                        AttributeValue>::const_iterator it =
               this->attribute_map().begin();
           it != this->attribute_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Span_Attributes_AttributeMapEntry_DoNotUse>
          entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attribute_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first,
            items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
            InternalWriteMessageNoVirtualToArray(1, *entry, deterministic,
                                                 target);
        ;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Span_Attributes_AttributeMapEntry_DoNotUse>
          entry;
      for (::google::protobuf::Map< ::std::string,
                                    ::google::devtools::cloudtrace::v2::
                                        AttributeValue>::const_iterator it =
               this->attribute_map().begin();
           it != this->attribute_map().end(); ++it) {
        entry.reset(attribute_map_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
            InternalWriteMessageNoVirtualToArray(1, *entry, deterministic,
                                                 target);
        ;
        Utf8Check::Check(&*it);
      }
    }
  }

  // int32 dropped_attributes_count = 2;
  if (this->dropped_attributes_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        2, this->dropped_attributes_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()),
            target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.devtools.cloudtrace.v2.Span.Attributes)
  return target;
}

size_t Span_Attributes::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:google.devtools.cloudtrace.v2.Span.Attributes)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()));
  }
  // map<string, .google.devtools.cloudtrace.v2.AttributeValue> attribute_map =
  // 1;
  total_size +=
      1 * ::google::protobuf::internal::FromIntSize(this->attribute_map_size());
  {
    ::google::protobuf::scoped_ptr<Span_Attributes_AttributeMapEntry_DoNotUse>
        entry;
    for (::google::protobuf::Map<
             ::std::string,
             ::google::devtools::cloudtrace::v2::AttributeValue>::const_iterator
             it = this->attribute_map().begin();
         it != this->attribute_map().end(); ++it) {
      entry.reset(attribute_map_.NewEntryWrapper(it->first, it->second));
      total_size +=
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
              *entry);
    }
  }

  // int32 dropped_attributes_count = 2;
  if (this->dropped_attributes_count() != 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                          this->dropped_attributes_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Span_Attributes::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:google.devtools.cloudtrace.v2.Span.Attributes)
  GOOGLE_DCHECK_NE(&from, this);
  const Span_Attributes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<
          const Span_Attributes>(&from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.devtools.cloudtrace.v2.Span.Attributes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:google.devtools.cloudtrace.v2.Span.Attributes)
    MergeFrom(*source);
  }
}

void Span_Attributes::MergeFrom(const Span_Attributes& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:google.devtools.cloudtrace.v2.Span.Attributes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  attribute_map_.MergeFrom(from.attribute_map_);
  if (from.dropped_attributes_count() != 0) {
    set_dropped_attributes_count(from.dropped_attributes_count());
  }
}

void Span_Attributes::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:google.devtools.cloudtrace.v2.Span.Attributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Span_Attributes::CopyFrom(const Span_Attributes& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:google.devtools.cloudtrace.v2.Span.Attributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Span_Attributes::IsInitialized() const { return true; }

void Span_Attributes::Swap(Span_Attributes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Span_Attributes::InternalSwap(Span_Attributes* other) {
  using std::swap;
  attribute_map_.Swap(&other->attribute_map_);
  swap(dropped_attributes_count_, other->dropped_attributes_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Span_Attributes::GetMetadata() const {
  protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      file_level_metadata[kIndexInFileMessages];
}

// ===================================================================

void Span_TimeEvent_Annotation::InitAsDefaultInstance() {
  ::google::devtools::cloudtrace::v2::
      _Span_TimeEvent_Annotation_default_instance_._instance.get_mutable()
          ->description_ =
      const_cast< ::google::devtools::cloudtrace::v2::TruncatableString*>(
          ::google::devtools::cloudtrace::v2::TruncatableString::
              internal_default_instance());
  ::google::devtools::cloudtrace::v2::
      _Span_TimeEvent_Annotation_default_instance_._instance.get_mutable()
          ->attributes_ =
      const_cast< ::google::devtools::cloudtrace::v2::Span_Attributes*>(
          ::google::devtools::cloudtrace::v2::Span_Attributes::
              internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Span_TimeEvent_Annotation::kDescriptionFieldNumber;
const int Span_TimeEvent_Annotation::kAttributesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Span_TimeEvent_Annotation::Span_TimeEvent_Annotation()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
        InitDefaultsSpan_TimeEvent_Annotation();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation)
}
Span_TimeEvent_Annotation::Span_TimeEvent_Annotation(
    const Span_TimeEvent_Annotation& from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_description()) {
    description_ = new ::google::devtools::cloudtrace::v2::TruncatableString(
        *from.description_);
  } else {
    description_ = NULL;
  }
  if (from.has_attributes()) {
    attributes_ = new ::google::devtools::cloudtrace::v2::Span_Attributes(
        *from.attributes_);
  } else {
    attributes_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation)
}

void Span_TimeEvent_Annotation::SharedCtor() {
  ::memset(&description_, 0,
           static_cast<size_t>(reinterpret_cast<char*>(&attributes_) -
                               reinterpret_cast<char*>(&description_)) +
               sizeof(attributes_));
  _cached_size_ = 0;
}

Span_TimeEvent_Annotation::~Span_TimeEvent_Annotation() {
  // @@protoc_insertion_point(destructor:google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation)
  SharedDtor();
}

void Span_TimeEvent_Annotation::SharedDtor() {
  if (this != internal_default_instance()) delete description_;
  if (this != internal_default_instance()) delete attributes_;
}

void Span_TimeEvent_Annotation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Span_TimeEvent_Annotation::descriptor() {
  ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      file_level_metadata[kIndexInFileMessages]
          .descriptor;
}

const Span_TimeEvent_Annotation& Span_TimeEvent_Annotation::default_instance() {
  ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      InitDefaultsSpan_TimeEvent_Annotation();
  return *internal_default_instance();
}

Span_TimeEvent_Annotation* Span_TimeEvent_Annotation::New(
    ::google::protobuf::Arena* arena) const {
  Span_TimeEvent_Annotation* n = new Span_TimeEvent_Annotation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Span_TimeEvent_Annotation::Clear() {
  // @@protoc_insertion_point(message_clear_start:google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (GetArenaNoVirtual() == NULL && description_ != NULL) {
    delete description_;
  }
  description_ = NULL;
  if (GetArenaNoVirtual() == NULL && attributes_ != NULL) {
    delete attributes_;
  }
  attributes_ = NULL;
  _internal_metadata_.Clear();
}

bool Span_TimeEvent_Annotation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.devtools.cloudtrace.v2.TruncatableString description = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.devtools.cloudtrace.v2.Span.Attributes attributes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_attributes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation)
  return false;
#undef DO_
}

void Span_TimeEvent_Annotation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // .google.devtools.cloudtrace.v2.TruncatableString description = 1;
  if (this->has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, *this->description_, output);
  }

  // .google.devtools.cloudtrace.v2.Span.Attributes attributes = 2;
  if (this->has_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *this->attributes_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
             ? _internal_metadata_.unknown_fields()
             : _internal_metadata_.default_instance()),
        output);
  }
  // @@protoc_insertion_point(serialize_end:google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation)
}

::google::protobuf::uint8*
Span_TimeEvent_Annotation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // .google.devtools.cloudtrace.v2.TruncatableString description = 1;
  if (this->has_description()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(1, *this->description_, deterministic,
                                    target);
  }

  // .google.devtools.cloudtrace.v2.Span.Attributes attributes = 2;
  if (this->has_attributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(2, *this->attributes_, deterministic,
                                    target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()),
            target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation)
  return target;
}

size_t Span_TimeEvent_Annotation::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()));
  }
  // .google.devtools.cloudtrace.v2.TruncatableString description = 1;
  if (this->has_description()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                          *this->description_);
  }

  // .google.devtools.cloudtrace.v2.Span.Attributes attributes = 2;
  if (this->has_attributes()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                          *this->attributes_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Span_TimeEvent_Annotation::MergeFrom(
    const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation)
  GOOGLE_DCHECK_NE(&from, this);
  const Span_TimeEvent_Annotation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<
          const Span_TimeEvent_Annotation>(&from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation)
    MergeFrom(*source);
  }
}

void Span_TimeEvent_Annotation::MergeFrom(
    const Span_TimeEvent_Annotation& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from.has_description()) {
    mutable_description()
        ->::google::devtools::cloudtrace::v2::TruncatableString::MergeFrom(
            from.description());
  }
  if (from.has_attributes()) {
    mutable_attributes()
        ->::google::devtools::cloudtrace::v2::Span_Attributes::MergeFrom(
            from.attributes());
  }
}

void Span_TimeEvent_Annotation::CopyFrom(
    const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Span_TimeEvent_Annotation::CopyFrom(
    const Span_TimeEvent_Annotation& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Span_TimeEvent_Annotation::IsInitialized() const { return true; }

void Span_TimeEvent_Annotation::Swap(Span_TimeEvent_Annotation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Span_TimeEvent_Annotation::InternalSwap(Span_TimeEvent_Annotation* other) {
  using std::swap;
  swap(description_, other->description_);
  swap(attributes_, other->attributes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Span_TimeEvent_Annotation::GetMetadata() const {
  protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      file_level_metadata[kIndexInFileMessages];
}

// ===================================================================

void Span_TimeEvent_MessageEvent::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Span_TimeEvent_MessageEvent::kTypeFieldNumber;
const int Span_TimeEvent_MessageEvent::kIdFieldNumber;
const int Span_TimeEvent_MessageEvent::kUncompressedSizeBytesFieldNumber;
const int Span_TimeEvent_MessageEvent::kCompressedSizeBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Span_TimeEvent_MessageEvent::Span_TimeEvent_MessageEvent()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
        InitDefaultsSpan_TimeEvent_MessageEvent();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent)
}
Span_TimeEvent_MessageEvent::Span_TimeEvent_MessageEvent(
    const Span_TimeEvent_MessageEvent& from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
           static_cast<size_t>(reinterpret_cast<char*>(&type_) -
                               reinterpret_cast<char*>(&id_)) +
               sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent)
}

void Span_TimeEvent_MessageEvent::SharedCtor() {
  ::memset(&id_, 0,
           static_cast<size_t>(reinterpret_cast<char*>(&type_) -
                               reinterpret_cast<char*>(&id_)) +
               sizeof(type_));
  _cached_size_ = 0;
}

Span_TimeEvent_MessageEvent::~Span_TimeEvent_MessageEvent() {
  // @@protoc_insertion_point(destructor:google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent)
  SharedDtor();
}

void Span_TimeEvent_MessageEvent::SharedDtor() {}

void Span_TimeEvent_MessageEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor*
Span_TimeEvent_MessageEvent::descriptor() {
  ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      file_level_metadata[kIndexInFileMessages]
          .descriptor;
}

const Span_TimeEvent_MessageEvent&
Span_TimeEvent_MessageEvent::default_instance() {
  ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      InitDefaultsSpan_TimeEvent_MessageEvent();
  return *internal_default_instance();
}

Span_TimeEvent_MessageEvent* Span_TimeEvent_MessageEvent::New(
    ::google::protobuf::Arena* arena) const {
  Span_TimeEvent_MessageEvent* n = new Span_TimeEvent_MessageEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Span_TimeEvent_MessageEvent::Clear() {
  // @@protoc_insertion_point(message_clear_start:google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::memset(&id_, 0,
           static_cast<size_t>(reinterpret_cast<char*>(&type_) -
                               reinterpret_cast<char*>(&id_)) +
               sizeof(type_));
  _internal_metadata_.Clear();
}

bool Span_TimeEvent_MessageEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type type =
      // 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
              input, &value)));
          set_type(static_cast< ::google::devtools::cloudtrace::v2::
                                    Span_TimeEvent_MessageEvent_Type>(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::int64,
               ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
              input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 uncompressed_size_bytes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::int64,
               ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
              input, &uncompressed_size_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 compressed_size_bytes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::int64,
               ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
              input, &compressed_size_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent)
  return false;
#undef DO_
}

void Span_TimeEvent_MessageEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // .google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(1, this->type(),
                                                            output);
  }

  // int64 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(),
                                                             output);
  }

  // int64 uncompressed_size_bytes = 3;
  if (this->uncompressed_size_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
        3, this->uncompressed_size_bytes(), output);
  }

  // int64 compressed_size_bytes = 4;
  if (this->compressed_size_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
        4, this->compressed_size_bytes(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
             ? _internal_metadata_.unknown_fields()
             : _internal_metadata_.default_instance()),
        output);
  }
  // @@protoc_insertion_point(serialize_end:google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent)
}

::google::protobuf::uint8*
Span_TimeEvent_MessageEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // .google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        1, this->type(), target);
  }

  // int64 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(
        2, this->id(), target);
  }

  // int64 uncompressed_size_bytes = 3;
  if (this->uncompressed_size_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(
        3, this->uncompressed_size_bytes(), target);
  }

  // int64 compressed_size_bytes = 4;
  if (this->compressed_size_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(
        4, this->compressed_size_bytes(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()),
            target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent)
  return target;
}

size_t Span_TimeEvent_MessageEvent::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()));
  }
  // int64 id = 2;
  if (this->id() != 0) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->id());
  }

  // int64 uncompressed_size_bytes = 3;
  if (this->uncompressed_size_bytes() != 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(
                          this->uncompressed_size_bytes());
  }

  // int64 compressed_size_bytes = 4;
  if (this->compressed_size_bytes() != 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(
                          this->compressed_size_bytes());
  }

  // .google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(
                          this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Span_TimeEvent_MessageEvent::MergeFrom(
    const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const Span_TimeEvent_MessageEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<
          const Span_TimeEvent_MessageEvent>(&from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent)
    MergeFrom(*source);
  }
}

void Span_TimeEvent_MessageEvent::MergeFrom(
    const Span_TimeEvent_MessageEvent& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.uncompressed_size_bytes() != 0) {
    set_uncompressed_size_bytes(from.uncompressed_size_bytes());
  }
  if (from.compressed_size_bytes() != 0) {
    set_compressed_size_bytes(from.compressed_size_bytes());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Span_TimeEvent_MessageEvent::CopyFrom(
    const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Span_TimeEvent_MessageEvent::CopyFrom(
    const Span_TimeEvent_MessageEvent& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Span_TimeEvent_MessageEvent::IsInitialized() const { return true; }

void Span_TimeEvent_MessageEvent::Swap(Span_TimeEvent_MessageEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Span_TimeEvent_MessageEvent::InternalSwap(
    Span_TimeEvent_MessageEvent* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(uncompressed_size_bytes_, other->uncompressed_size_bytes_);
  swap(compressed_size_bytes_, other->compressed_size_bytes_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Span_TimeEvent_MessageEvent::GetMetadata() const {
  protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      file_level_metadata[kIndexInFileMessages];
}

// ===================================================================

void Span_TimeEvent::InitAsDefaultInstance() {
  ::google::devtools::cloudtrace::v2::_Span_TimeEvent_default_instance_
      ._instance.get_mutable()
      ->time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::devtools::cloudtrace::v2::_Span_TimeEvent_default_instance_
      .annotation_ = const_cast<
      ::google::devtools::cloudtrace::v2::Span_TimeEvent_Annotation*>(
      ::google::devtools::cloudtrace::v2::Span_TimeEvent_Annotation::
          internal_default_instance());
  ::google::devtools::cloudtrace::v2::_Span_TimeEvent_default_instance_
      .message_event_ = const_cast<
      ::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent*>(
      ::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent::
          internal_default_instance());
}
void Span_TimeEvent::clear_time() {
  if (GetArenaNoVirtual() == NULL && time_ != NULL) {
    delete time_;
  }
  time_ = NULL;
}
void Span_TimeEvent::set_allocated_annotation(
    ::google::devtools::cloudtrace::v2::Span_TimeEvent_Annotation* annotation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (annotation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      annotation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, annotation, submessage_arena);
    }
    set_has_annotation();
    value_.annotation_ = annotation;
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v2.Span.TimeEvent.annotation)
}
void Span_TimeEvent::set_allocated_message_event(
    ::google::devtools::cloudtrace::v2::Span_TimeEvent_MessageEvent*
        message_event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (message_event) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      message_event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, message_event, submessage_arena);
    }
    set_has_message_event();
    value_.message_event_ = message_event;
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v2.Span.TimeEvent.message_event)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Span_TimeEvent::kTimeFieldNumber;
const int Span_TimeEvent::kAnnotationFieldNumber;
const int Span_TimeEvent::kMessageEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Span_TimeEvent::Span_TimeEvent()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
        InitDefaultsSpan_TimeEvent();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.devtools.cloudtrace.v2.Span.TimeEvent)
}
Span_TimeEvent::Span_TimeEvent(const Span_TimeEvent& from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_time()) {
    time_ = new ::google::protobuf::Timestamp(*from.time_);
  } else {
    time_ = NULL;
  }
  clear_has_value();
  switch (from.value_case()) {
    case kAnnotation: {
      mutable_annotation()->::google::devtools::cloudtrace::v2::
          Span_TimeEvent_Annotation::MergeFrom(from.annotation());
      break;
    }
    case kMessageEvent: {
      mutable_message_event()->::google::devtools::cloudtrace::v2::
          Span_TimeEvent_MessageEvent::MergeFrom(from.message_event());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.devtools.cloudtrace.v2.Span.TimeEvent)
}

void Span_TimeEvent::SharedCtor() {
  time_ = NULL;
  clear_has_value();
  _cached_size_ = 0;
}

Span_TimeEvent::~Span_TimeEvent() {
  // @@protoc_insertion_point(destructor:google.devtools.cloudtrace.v2.Span.TimeEvent)
  SharedDtor();
}

void Span_TimeEvent::SharedDtor() {
  if (this != internal_default_instance()) delete time_;
  if (has_value()) {
    clear_value();
  }
}

void Span_TimeEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Span_TimeEvent::descriptor() {
  ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      file_level_metadata[kIndexInFileMessages]
          .descriptor;
}

const Span_TimeEvent& Span_TimeEvent::default_instance() {
  ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      InitDefaultsSpan_TimeEvent();
  return *internal_default_instance();
}

Span_TimeEvent* Span_TimeEvent::New(::google::protobuf::Arena* arena) const {
  Span_TimeEvent* n = new Span_TimeEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Span_TimeEvent::clear_value() {
  // @@protoc_insertion_point(one_of_clear_start:google.devtools.cloudtrace.v2.Span.TimeEvent)
  switch (value_case()) {
    case kAnnotation: {
      delete value_.annotation_;
      break;
    }
    case kMessageEvent: {
      delete value_.message_event_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}

void Span_TimeEvent::Clear() {
  // @@protoc_insertion_point(message_clear_start:google.devtools.cloudtrace.v2.Span.TimeEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (GetArenaNoVirtual() == NULL && time_ != NULL) {
    delete time_;
  }
  time_ = NULL;
  clear_value();
  _internal_metadata_.Clear();
}

bool Span_TimeEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.devtools.cloudtrace.v2.Span.TimeEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Timestamp time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation annotation =
      // 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_annotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent
      // message_event = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_message_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.devtools.cloudtrace.v2.Span.TimeEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.devtools.cloudtrace.v2.Span.TimeEvent)
  return false;
#undef DO_
}

void Span_TimeEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.devtools.cloudtrace.v2.Span.TimeEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // .google.protobuf.Timestamp time = 1;
  if (this->has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, *this->time_, output);
  }

  // .google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation annotation = 2;
  if (has_annotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *value_.annotation_, output);
  }

  // .google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent message_event =
  // 3;
  if (has_message_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, *value_.message_event_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
             ? _internal_metadata_.unknown_fields()
             : _internal_metadata_.default_instance()),
        output);
  }
  // @@protoc_insertion_point(serialize_end:google.devtools.cloudtrace.v2.Span.TimeEvent)
}

::google::protobuf::uint8*
Span_TimeEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.devtools.cloudtrace.v2.Span.TimeEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // .google.protobuf.Timestamp time = 1;
  if (this->has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(1, *this->time_, deterministic, target);
  }

  // .google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation annotation = 2;
  if (has_annotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(2, *value_.annotation_, deterministic,
                                    target);
  }

  // .google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent message_event =
  // 3;
  if (has_message_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(3, *value_.message_event_, deterministic,
                                    target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()),
            target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.devtools.cloudtrace.v2.Span.TimeEvent)
  return target;
}

size_t Span_TimeEvent::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:google.devtools.cloudtrace.v2.Span.TimeEvent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Timestamp time = 1;
  if (this->has_time()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                          *this->time_);
  }

  switch (value_case()) {
    // .google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation annotation = 2;
    case kAnnotation: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                  *value_.annotation_);
      break;
    }
    // .google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent message_event
    // = 3;
    case kMessageEvent: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                  *value_.message_event_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Span_TimeEvent::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:google.devtools.cloudtrace.v2.Span.TimeEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const Span_TimeEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<
          const Span_TimeEvent>(&from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.devtools.cloudtrace.v2.Span.TimeEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:google.devtools.cloudtrace.v2.Span.TimeEvent)
    MergeFrom(*source);
  }
}

void Span_TimeEvent::MergeFrom(const Span_TimeEvent& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:google.devtools.cloudtrace.v2.Span.TimeEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from.has_time()) {
    mutable_time()->::google::protobuf::Timestamp::MergeFrom(from.time());
  }
  switch (from.value_case()) {
    case kAnnotation: {
      mutable_annotation()->::google::devtools::cloudtrace::v2::
          Span_TimeEvent_Annotation::MergeFrom(from.annotation());
      break;
    }
    case kMessageEvent: {
      mutable_message_event()->::google::devtools::cloudtrace::v2::
          Span_TimeEvent_MessageEvent::MergeFrom(from.message_event());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void Span_TimeEvent::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:google.devtools.cloudtrace.v2.Span.TimeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Span_TimeEvent::CopyFrom(const Span_TimeEvent& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:google.devtools.cloudtrace.v2.Span.TimeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Span_TimeEvent::IsInitialized() const { return true; }

void Span_TimeEvent::Swap(Span_TimeEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Span_TimeEvent::InternalSwap(Span_TimeEvent* other) {
  using std::swap;
  swap(time_, other->time_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Span_TimeEvent::GetMetadata() const {
  protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      file_level_metadata[kIndexInFileMessages];
}

// ===================================================================

void Span_TimeEvents::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Span_TimeEvents::kTimeEventFieldNumber;
const int Span_TimeEvents::kDroppedAnnotationsCountFieldNumber;
const int Span_TimeEvents::kDroppedMessageEventsCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Span_TimeEvents::Span_TimeEvents()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
        InitDefaultsSpan_TimeEvents();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.devtools.cloudtrace.v2.Span.TimeEvents)
}
Span_TimeEvents::Span_TimeEvents(const Span_TimeEvents& from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      time_event_(from.time_event_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dropped_annotations_count_, &from.dropped_annotations_count_,
           static_cast<size_t>(
               reinterpret_cast<char*>(&dropped_message_events_count_) -
               reinterpret_cast<char*>(&dropped_annotations_count_)) +
               sizeof(dropped_message_events_count_));
  // @@protoc_insertion_point(copy_constructor:google.devtools.cloudtrace.v2.Span.TimeEvents)
}

void Span_TimeEvents::SharedCtor() {
  ::memset(&dropped_annotations_count_, 0,
           static_cast<size_t>(
               reinterpret_cast<char*>(&dropped_message_events_count_) -
               reinterpret_cast<char*>(&dropped_annotations_count_)) +
               sizeof(dropped_message_events_count_));
  _cached_size_ = 0;
}

Span_TimeEvents::~Span_TimeEvents() {
  // @@protoc_insertion_point(destructor:google.devtools.cloudtrace.v2.Span.TimeEvents)
  SharedDtor();
}

void Span_TimeEvents::SharedDtor() {}

void Span_TimeEvents::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Span_TimeEvents::descriptor() {
  ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      file_level_metadata[kIndexInFileMessages]
          .descriptor;
}

const Span_TimeEvents& Span_TimeEvents::default_instance() {
  ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      InitDefaultsSpan_TimeEvents();
  return *internal_default_instance();
}

Span_TimeEvents* Span_TimeEvents::New(::google::protobuf::Arena* arena) const {
  Span_TimeEvents* n = new Span_TimeEvents;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Span_TimeEvents::Clear() {
  // @@protoc_insertion_point(message_clear_start:google.devtools.cloudtrace.v2.Span.TimeEvents)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  time_event_.Clear();
  ::memset(&dropped_annotations_count_, 0,
           static_cast<size_t>(
               reinterpret_cast<char*>(&dropped_message_events_count_) -
               reinterpret_cast<char*>(&dropped_annotations_count_)) +
               sizeof(dropped_message_events_count_));
  _internal_metadata_.Clear();
}

bool Span_TimeEvents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.devtools.cloudtrace.v2.Span.TimeEvents)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.devtools.cloudtrace.v2.Span.TimeEvent time_event = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, add_time_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dropped_annotations_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::int32,
               ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &dropped_annotations_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dropped_message_events_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::int32,
               ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &dropped_message_events_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.devtools.cloudtrace.v2.Span.TimeEvents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.devtools.cloudtrace.v2.Span.TimeEvents)
  return false;
#undef DO_
}

void Span_TimeEvents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.devtools.cloudtrace.v2.Span.TimeEvents)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .google.devtools.cloudtrace.v2.Span.TimeEvent time_event = 1;
  for (unsigned int i = 0,
                    n = static_cast<unsigned int>(this->time_event_size());
       i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->time_event(static_cast<int>(i)), output);
  }

  // int32 dropped_annotations_count = 2;
  if (this->dropped_annotations_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        2, this->dropped_annotations_count(), output);
  }

  // int32 dropped_message_events_count = 3;
  if (this->dropped_message_events_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        3, this->dropped_message_events_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
             ? _internal_metadata_.unknown_fields()
             : _internal_metadata_.default_instance()),
        output);
  }
  // @@protoc_insertion_point(serialize_end:google.devtools.cloudtrace.v2.Span.TimeEvents)
}

::google::protobuf::uint8*
Span_TimeEvents::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.devtools.cloudtrace.v2.Span.TimeEvents)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .google.devtools.cloudtrace.v2.Span.TimeEvent time_event = 1;
  for (unsigned int i = 0,
                    n = static_cast<unsigned int>(this->time_event_size());
       i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(1, this->time_event(static_cast<int>(i)),
                                    deterministic, target);
  }

  // int32 dropped_annotations_count = 2;
  if (this->dropped_annotations_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        2, this->dropped_annotations_count(), target);
  }

  // int32 dropped_message_events_count = 3;
  if (this->dropped_message_events_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        3, this->dropped_message_events_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()),
            target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.devtools.cloudtrace.v2.Span.TimeEvents)
  return target;
}

size_t Span_TimeEvents::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:google.devtools.cloudtrace.v2.Span.TimeEvents)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()));
  }
  // repeated .google.devtools.cloudtrace.v2.Span.TimeEvent time_event = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->time_event_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->time_event(static_cast<int>(i)));
    }
  }

  // int32 dropped_annotations_count = 2;
  if (this->dropped_annotations_count() != 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                          this->dropped_annotations_count());
  }

  // int32 dropped_message_events_count = 3;
  if (this->dropped_message_events_count() != 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                          this->dropped_message_events_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Span_TimeEvents::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:google.devtools.cloudtrace.v2.Span.TimeEvents)
  GOOGLE_DCHECK_NE(&from, this);
  const Span_TimeEvents* source =
      ::google::protobuf::internal::DynamicCastToGenerated<
          const Span_TimeEvents>(&from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.devtools.cloudtrace.v2.Span.TimeEvents)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:google.devtools.cloudtrace.v2.Span.TimeEvents)
    MergeFrom(*source);
  }
}

void Span_TimeEvents::MergeFrom(const Span_TimeEvents& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:google.devtools.cloudtrace.v2.Span.TimeEvents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  time_event_.MergeFrom(from.time_event_);
  if (from.dropped_annotations_count() != 0) {
    set_dropped_annotations_count(from.dropped_annotations_count());
  }
  if (from.dropped_message_events_count() != 0) {
    set_dropped_message_events_count(from.dropped_message_events_count());
  }
}

void Span_TimeEvents::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:google.devtools.cloudtrace.v2.Span.TimeEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Span_TimeEvents::CopyFrom(const Span_TimeEvents& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:google.devtools.cloudtrace.v2.Span.TimeEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Span_TimeEvents::IsInitialized() const { return true; }

void Span_TimeEvents::Swap(Span_TimeEvents* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Span_TimeEvents::InternalSwap(Span_TimeEvents* other) {
  using std::swap;
  time_event_.InternalSwap(&other->time_event_);
  swap(dropped_annotations_count_, other->dropped_annotations_count_);
  swap(dropped_message_events_count_, other->dropped_message_events_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Span_TimeEvents::GetMetadata() const {
  protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      file_level_metadata[kIndexInFileMessages];
}

// ===================================================================

void Span_Link::InitAsDefaultInstance() {
  ::google::devtools::cloudtrace::v2::_Span_Link_default_instance_._instance
      .get_mutable()
      ->attributes_ =
      const_cast< ::google::devtools::cloudtrace::v2::Span_Attributes*>(
          ::google::devtools::cloudtrace::v2::Span_Attributes::
              internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Span_Link::kTraceIdFieldNumber;
const int Span_Link::kSpanIdFieldNumber;
const int Span_Link::kTypeFieldNumber;
const int Span_Link::kAttributesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Span_Link::Span_Link()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
        InitDefaultsSpan_Link();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.devtools.cloudtrace.v2.Span.Link)
}
Span_Link::Span_Link(const Span_Link& from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trace_id_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.trace_id().size() > 0) {
    trace_id_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.trace_id_);
  }
  span_id_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.span_id().size() > 0) {
    span_id_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.span_id_);
  }
  if (from.has_attributes()) {
    attributes_ = new ::google::devtools::cloudtrace::v2::Span_Attributes(
        *from.attributes_);
  } else {
    attributes_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:google.devtools.cloudtrace.v2.Span.Link)
}

void Span_Link::SharedCtor() {
  trace_id_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  span_id_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&attributes_, 0,
           static_cast<size_t>(reinterpret_cast<char*>(&type_) -
                               reinterpret_cast<char*>(&attributes_)) +
               sizeof(type_));
  _cached_size_ = 0;
}

Span_Link::~Span_Link() {
  // @@protoc_insertion_point(destructor:google.devtools.cloudtrace.v2.Span.Link)
  SharedDtor();
}

void Span_Link::SharedDtor() {
  trace_id_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  span_id_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete attributes_;
}

void Span_Link::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Span_Link::descriptor() {
  ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      file_level_metadata[kIndexInFileMessages]
          .descriptor;
}

const Span_Link& Span_Link::default_instance() {
  ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      InitDefaultsSpan_Link();
  return *internal_default_instance();
}

Span_Link* Span_Link::New(::google::protobuf::Arena* arena) const {
  Span_Link* n = new Span_Link;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Span_Link::Clear() {
  // @@protoc_insertion_point(message_clear_start:google.devtools.cloudtrace.v2.Span.Link)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  trace_id_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  span_id_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && attributes_ != NULL) {
    delete attributes_;
  }
  attributes_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool Span_Link::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.devtools.cloudtrace.v2.Span.Link)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string trace_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_trace_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->trace_id().data(),
              static_cast<int>(this->trace_id().length()),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "google.devtools.cloudtrace.v2.Span.Link.trace_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string span_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_span_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->span_id().data(),
              static_cast<int>(this->span_id().length()),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "google.devtools.cloudtrace.v2.Span.Link.span_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.devtools.cloudtrace.v2.Span.Link.Type type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
              input, &value)));
          set_type(
              static_cast< ::google::devtools::cloudtrace::v2::Span_Link_Type>(
                  value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.devtools.cloudtrace.v2.Span.Attributes attributes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_attributes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.devtools.cloudtrace.v2.Span.Link)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.devtools.cloudtrace.v2.Span.Link)
  return false;
#undef DO_
}

void Span_Link::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.devtools.cloudtrace.v2.Span.Link)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // string trace_id = 1;
  if (this->trace_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->trace_id().data(), static_cast<int>(this->trace_id().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "google.devtools.cloudtrace.v2.Span.Link.trace_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        1, this->trace_id(), output);
  }

  // string span_id = 2;
  if (this->span_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->span_id().data(), static_cast<int>(this->span_id().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "google.devtools.cloudtrace.v2.Span.Link.span_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        2, this->span_id(), output);
  }

  // .google.devtools.cloudtrace.v2.Span.Link.Type type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(3, this->type(),
                                                            output);
  }

  // .google.devtools.cloudtrace.v2.Span.Attributes attributes = 4;
  if (this->has_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, *this->attributes_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
             ? _internal_metadata_.unknown_fields()
             : _internal_metadata_.default_instance()),
        output);
  }
  // @@protoc_insertion_point(serialize_end:google.devtools.cloudtrace.v2.Span.Link)
}

::google::protobuf::uint8* Span_Link::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.devtools.cloudtrace.v2.Span.Link)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // string trace_id = 1;
  if (this->trace_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->trace_id().data(), static_cast<int>(this->trace_id().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "google.devtools.cloudtrace.v2.Span.Link.trace_id");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->trace_id(), target);
  }

  // string span_id = 2;
  if (this->span_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->span_id().data(), static_cast<int>(this->span_id().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "google.devtools.cloudtrace.v2.Span.Link.span_id");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->span_id(), target);
  }

  // .google.devtools.cloudtrace.v2.Span.Link.Type type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        3, this->type(), target);
  }

  // .google.devtools.cloudtrace.v2.Span.Attributes attributes = 4;
  if (this->has_attributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(4, *this->attributes_, deterministic,
                                    target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()),
            target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.devtools.cloudtrace.v2.Span.Link)
  return target;
}

size_t Span_Link::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:google.devtools.cloudtrace.v2.Span.Link)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()));
  }
  // string trace_id = 1;
  if (this->trace_id().size() > 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                          this->trace_id());
  }

  // string span_id = 2;
  if (this->span_id().size() > 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                          this->span_id());
  }

  // .google.devtools.cloudtrace.v2.Span.Attributes attributes = 4;
  if (this->has_attributes()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                          *this->attributes_);
  }

  // .google.devtools.cloudtrace.v2.Span.Link.Type type = 3;
  if (this->type() != 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(
                          this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Span_Link::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:google.devtools.cloudtrace.v2.Span.Link)
  GOOGLE_DCHECK_NE(&from, this);
  const Span_Link* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Span_Link>(
          &from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.devtools.cloudtrace.v2.Span.Link)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:google.devtools.cloudtrace.v2.Span.Link)
    MergeFrom(*source);
  }
}

void Span_Link::MergeFrom(const Span_Link& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:google.devtools.cloudtrace.v2.Span.Link)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from.trace_id().size() > 0) {
    trace_id_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.trace_id_);
  }
  if (from.span_id().size() > 0) {
    span_id_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.span_id_);
  }
  if (from.has_attributes()) {
    mutable_attributes()
        ->::google::devtools::cloudtrace::v2::Span_Attributes::MergeFrom(
            from.attributes());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Span_Link::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:google.devtools.cloudtrace.v2.Span.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Span_Link::CopyFrom(const Span_Link& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:google.devtools.cloudtrace.v2.Span.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Span_Link::IsInitialized() const { return true; }

void Span_Link::Swap(Span_Link* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Span_Link::InternalSwap(Span_Link* other) {
  using std::swap;
  trace_id_.Swap(&other->trace_id_);
  span_id_.Swap(&other->span_id_);
  swap(attributes_, other->attributes_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Span_Link::GetMetadata() const {
  protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      file_level_metadata[kIndexInFileMessages];
}

// ===================================================================

void Span_Links::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Span_Links::kLinkFieldNumber;
const int Span_Links::kDroppedLinksCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Span_Links::Span_Links()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
        InitDefaultsSpan_Links();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.devtools.cloudtrace.v2.Span.Links)
}
Span_Links::Span_Links(const Span_Links& from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      link_(from.link_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dropped_links_count_ = from.dropped_links_count_;
  // @@protoc_insertion_point(copy_constructor:google.devtools.cloudtrace.v2.Span.Links)
}

void Span_Links::SharedCtor() {
  dropped_links_count_ = 0;
  _cached_size_ = 0;
}

Span_Links::~Span_Links() {
  // @@protoc_insertion_point(destructor:google.devtools.cloudtrace.v2.Span.Links)
  SharedDtor();
}

void Span_Links::SharedDtor() {}

void Span_Links::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Span_Links::descriptor() {
  ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      file_level_metadata[kIndexInFileMessages]
          .descriptor;
}

const Span_Links& Span_Links::default_instance() {
  ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      InitDefaultsSpan_Links();
  return *internal_default_instance();
}

Span_Links* Span_Links::New(::google::protobuf::Arena* arena) const {
  Span_Links* n = new Span_Links;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Span_Links::Clear() {
  // @@protoc_insertion_point(message_clear_start:google.devtools.cloudtrace.v2.Span.Links)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  link_.Clear();
  dropped_links_count_ = 0;
  _internal_metadata_.Clear();
}

bool Span_Links::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.devtools.cloudtrace.v2.Span.Links)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.devtools.cloudtrace.v2.Span.Link link = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, add_link()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dropped_links_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::int32,
               ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &dropped_links_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.devtools.cloudtrace.v2.Span.Links)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.devtools.cloudtrace.v2.Span.Links)
  return false;
#undef DO_
}

void Span_Links::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.devtools.cloudtrace.v2.Span.Links)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .google.devtools.cloudtrace.v2.Span.Link link = 1;
  for (unsigned int i = 0, n = static_cast<unsigned int>(this->link_size());
       i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->link(static_cast<int>(i)), output);
  }

  // int32 dropped_links_count = 2;
  if (this->dropped_links_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        2, this->dropped_links_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
             ? _internal_metadata_.unknown_fields()
             : _internal_metadata_.default_instance()),
        output);
  }
  // @@protoc_insertion_point(serialize_end:google.devtools.cloudtrace.v2.Span.Links)
}

::google::protobuf::uint8* Span_Links::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.devtools.cloudtrace.v2.Span.Links)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .google.devtools.cloudtrace.v2.Span.Link link = 1;
  for (unsigned int i = 0, n = static_cast<unsigned int>(this->link_size());
       i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(1, this->link(static_cast<int>(i)),
                                    deterministic, target);
  }

  // int32 dropped_links_count = 2;
  if (this->dropped_links_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        2, this->dropped_links_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()),
            target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.devtools.cloudtrace.v2.Span.Links)
  return target;
}

size_t Span_Links::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:google.devtools.cloudtrace.v2.Span.Links)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()));
  }
  // repeated .google.devtools.cloudtrace.v2.Span.Link link = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->link_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->link(static_cast<int>(i)));
    }
  }

  // int32 dropped_links_count = 2;
  if (this->dropped_links_count() != 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                          this->dropped_links_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Span_Links::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:google.devtools.cloudtrace.v2.Span.Links)
  GOOGLE_DCHECK_NE(&from, this);
  const Span_Links* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Span_Links>(
          &from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.devtools.cloudtrace.v2.Span.Links)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:google.devtools.cloudtrace.v2.Span.Links)
    MergeFrom(*source);
  }
}

void Span_Links::MergeFrom(const Span_Links& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:google.devtools.cloudtrace.v2.Span.Links)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  link_.MergeFrom(from.link_);
  if (from.dropped_links_count() != 0) {
    set_dropped_links_count(from.dropped_links_count());
  }
}

void Span_Links::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:google.devtools.cloudtrace.v2.Span.Links)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Span_Links::CopyFrom(const Span_Links& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:google.devtools.cloudtrace.v2.Span.Links)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Span_Links::IsInitialized() const { return true; }

void Span_Links::Swap(Span_Links* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Span_Links::InternalSwap(Span_Links* other) {
  using std::swap;
  link_.InternalSwap(&other->link_);
  swap(dropped_links_count_, other->dropped_links_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Span_Links::GetMetadata() const {
  protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      file_level_metadata[kIndexInFileMessages];
}

// ===================================================================

void Span::InitAsDefaultInstance() {
  ::google::devtools::cloudtrace::v2::_Span_default_instance_._instance
      .get_mutable()
      ->display_name_ =
      const_cast< ::google::devtools::cloudtrace::v2::TruncatableString*>(
          ::google::devtools::cloudtrace::v2::TruncatableString::
              internal_default_instance());
  ::google::devtools::cloudtrace::v2::_Span_default_instance_._instance
      .get_mutable()
      ->start_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::devtools::cloudtrace::v2::_Span_default_instance_._instance
      .get_mutable()
      ->end_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::devtools::cloudtrace::v2::_Span_default_instance_._instance
      .get_mutable()
      ->attributes_ =
      const_cast< ::google::devtools::cloudtrace::v2::Span_Attributes*>(
          ::google::devtools::cloudtrace::v2::Span_Attributes::
              internal_default_instance());
  ::google::devtools::cloudtrace::v2::_Span_default_instance_._instance
      .get_mutable()
      ->stack_trace_ =
      const_cast< ::google::devtools::cloudtrace::v2::StackTrace*>(
          ::google::devtools::cloudtrace::v2::StackTrace::
              internal_default_instance());
  ::google::devtools::cloudtrace::v2::_Span_default_instance_._instance
      .get_mutable()
      ->time_events_ =
      const_cast< ::google::devtools::cloudtrace::v2::Span_TimeEvents*>(
          ::google::devtools::cloudtrace::v2::Span_TimeEvents::
              internal_default_instance());
  ::google::devtools::cloudtrace::v2::_Span_default_instance_._instance
      .get_mutable()
      ->links_ = const_cast< ::google::devtools::cloudtrace::v2::Span_Links*>(
      ::google::devtools::cloudtrace::v2::Span_Links::
          internal_default_instance());
  ::google::devtools::cloudtrace::v2::_Span_default_instance_._instance
      .get_mutable()
      ->status_ = const_cast< ::google::rpc::Status*>(
      ::google::rpc::Status::internal_default_instance());
  ::google::devtools::cloudtrace::v2::_Span_default_instance_._instance
      .get_mutable()
      ->same_process_as_parent_span_ =
      const_cast< ::google::protobuf::BoolValue*>(
          ::google::protobuf::BoolValue::internal_default_instance());
  ::google::devtools::cloudtrace::v2::_Span_default_instance_._instance
      .get_mutable()
      ->child_span_count_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
}
void Span::clear_start_time() {
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) {
    delete start_time_;
  }
  start_time_ = NULL;
}
void Span::clear_end_time() {
  if (GetArenaNoVirtual() == NULL && end_time_ != NULL) {
    delete end_time_;
  }
  end_time_ = NULL;
}
void Span::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
}
void Span::clear_same_process_as_parent_span() {
  if (GetArenaNoVirtual() == NULL && same_process_as_parent_span_ != NULL) {
    delete same_process_as_parent_span_;
  }
  same_process_as_parent_span_ = NULL;
}
void Span::clear_child_span_count() {
  if (GetArenaNoVirtual() == NULL && child_span_count_ != NULL) {
    delete child_span_count_;
  }
  child_span_count_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Span::kNameFieldNumber;
const int Span::kSpanIdFieldNumber;
const int Span::kParentSpanIdFieldNumber;
const int Span::kDisplayNameFieldNumber;
const int Span::kStartTimeFieldNumber;
const int Span::kEndTimeFieldNumber;
const int Span::kAttributesFieldNumber;
const int Span::kStackTraceFieldNumber;
const int Span::kTimeEventsFieldNumber;
const int Span::kLinksFieldNumber;
const int Span::kStatusFieldNumber;
const int Span::kSameProcessAsParentSpanFieldNumber;
const int Span::kChildSpanCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Span::Span() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
        InitDefaultsSpan();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.devtools.cloudtrace.v2.Span)
}
Span::Span(const Span& from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.name_);
  }
  span_id_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.span_id().size() > 0) {
    span_id_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.span_id_);
  }
  parent_span_id_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parent_span_id().size() > 0) {
    parent_span_id_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.parent_span_id_);
  }
  if (from.has_display_name()) {
    display_name_ = new ::google::devtools::cloudtrace::v2::TruncatableString(
        *from.display_name_);
  } else {
    display_name_ = NULL;
  }
  if (from.has_start_time()) {
    start_time_ = new ::google::protobuf::Timestamp(*from.start_time_);
  } else {
    start_time_ = NULL;
  }
  if (from.has_end_time()) {
    end_time_ = new ::google::protobuf::Timestamp(*from.end_time_);
  } else {
    end_time_ = NULL;
  }
  if (from.has_attributes()) {
    attributes_ = new ::google::devtools::cloudtrace::v2::Span_Attributes(
        *from.attributes_);
  } else {
    attributes_ = NULL;
  }
  if (from.has_stack_trace()) {
    stack_trace_ =
        new ::google::devtools::cloudtrace::v2::StackTrace(*from.stack_trace_);
  } else {
    stack_trace_ = NULL;
  }
  if (from.has_time_events()) {
    time_events_ = new ::google::devtools::cloudtrace::v2::Span_TimeEvents(
        *from.time_events_);
  } else {
    time_events_ = NULL;
  }
  if (from.has_links()) {
    links_ = new ::google::devtools::cloudtrace::v2::Span_Links(*from.links_);
  } else {
    links_ = NULL;
  }
  if (from.has_status()) {
    status_ = new ::google::rpc::Status(*from.status_);
  } else {
    status_ = NULL;
  }
  if (from.has_same_process_as_parent_span()) {
    same_process_as_parent_span_ =
        new ::google::protobuf::BoolValue(*from.same_process_as_parent_span_);
  } else {
    same_process_as_parent_span_ = NULL;
  }
  if (from.has_child_span_count()) {
    child_span_count_ =
        new ::google::protobuf::Int32Value(*from.child_span_count_);
  } else {
    child_span_count_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.devtools.cloudtrace.v2.Span)
}

void Span::SharedCtor() {
  name_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  span_id_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_span_id_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&display_name_, 0,
           static_cast<size_t>(reinterpret_cast<char*>(&child_span_count_) -
                               reinterpret_cast<char*>(&display_name_)) +
               sizeof(child_span_count_));
  _cached_size_ = 0;
}

Span::~Span() {
  // @@protoc_insertion_point(destructor:google.devtools.cloudtrace.v2.Span)
  SharedDtor();
}

void Span::SharedDtor() {
  name_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  span_id_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_span_id_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete display_name_;
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete end_time_;
  if (this != internal_default_instance()) delete attributes_;
  if (this != internal_default_instance()) delete stack_trace_;
  if (this != internal_default_instance()) delete time_events_;
  if (this != internal_default_instance()) delete links_;
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete same_process_as_parent_span_;
  if (this != internal_default_instance()) delete child_span_count_;
}

void Span::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Span::descriptor() {
  ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      file_level_metadata[kIndexInFileMessages]
          .descriptor;
}

const Span& Span::default_instance() {
  ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      InitDefaultsSpan();
  return *internal_default_instance();
}

Span* Span::New(::google::protobuf::Arena* arena) const {
  Span* n = new Span;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Span::Clear() {
  // @@protoc_insertion_point(message_clear_start:google.devtools.cloudtrace.v2.Span)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  name_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  span_id_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_span_id_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && display_name_ != NULL) {
    delete display_name_;
  }
  display_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && start_time_ != NULL) {
    delete start_time_;
  }
  start_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && end_time_ != NULL) {
    delete end_time_;
  }
  end_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && attributes_ != NULL) {
    delete attributes_;
  }
  attributes_ = NULL;
  if (GetArenaNoVirtual() == NULL && stack_trace_ != NULL) {
    delete stack_trace_;
  }
  stack_trace_ = NULL;
  if (GetArenaNoVirtual() == NULL && time_events_ != NULL) {
    delete time_events_;
  }
  time_events_ = NULL;
  if (GetArenaNoVirtual() == NULL && links_ != NULL) {
    delete links_;
  }
  links_ = NULL;
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
  if (GetArenaNoVirtual() == NULL && same_process_as_parent_span_ != NULL) {
    delete same_process_as_parent_span_;
  }
  same_process_as_parent_span_ = NULL;
  if (GetArenaNoVirtual() == NULL && child_span_count_ != NULL) {
    delete child_span_count_;
  }
  child_span_count_ = NULL;
  _internal_metadata_.Clear();
}

bool Span::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.devtools.cloudtrace.v2.Span)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->name().data(), static_cast<int>(this->name().length()),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "google.devtools.cloudtrace.v2.Span.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string span_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_span_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->span_id().data(),
              static_cast<int>(this->span_id().length()),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "google.devtools.cloudtrace.v2.Span.span_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string parent_span_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_parent_span_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->parent_span_id().data(),
              static_cast<int>(this->parent_span_id().length()),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "google.devtools.cloudtrace.v2.Span.parent_span_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.devtools.cloudtrace.v2.TruncatableString display_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_display_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp start_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp end_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_end_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.devtools.cloudtrace.v2.Span.Attributes attributes = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_attributes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.devtools.cloudtrace.v2.StackTrace stack_trace = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_stack_trace()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.devtools.cloudtrace.v2.Span.TimeEvents time_events = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_time_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.devtools.cloudtrace.v2.Span.Links links = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_links()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.rpc.Status status = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue same_process_as_parent_span = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_same_process_as_parent_span()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int32Value child_span_count = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_child_span_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.devtools.cloudtrace.v2.Span)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.devtools.cloudtrace.v2.Span)
  return false;
#undef DO_
}

void Span::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.devtools.cloudtrace.v2.Span)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->name().data(), static_cast<int>(this->name().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "google.devtools.cloudtrace.v2.Span.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        1, this->name(), output);
  }

  // string span_id = 2;
  if (this->span_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->span_id().data(), static_cast<int>(this->span_id().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "google.devtools.cloudtrace.v2.Span.span_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        2, this->span_id(), output);
  }

  // string parent_span_id = 3;
  if (this->parent_span_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->parent_span_id().data(),
        static_cast<int>(this->parent_span_id().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "google.devtools.cloudtrace.v2.Span.parent_span_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        3, this->parent_span_id(), output);
  }

  // .google.devtools.cloudtrace.v2.TruncatableString display_name = 4;
  if (this->has_display_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, *this->display_name_, output);
  }

  // .google.protobuf.Timestamp start_time = 5;
  if (this->has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, *this->start_time_, output);
  }

  // .google.protobuf.Timestamp end_time = 6;
  if (this->has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, *this->end_time_, output);
  }

  // .google.devtools.cloudtrace.v2.Span.Attributes attributes = 7;
  if (this->has_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, *this->attributes_, output);
  }

  // .google.devtools.cloudtrace.v2.StackTrace stack_trace = 8;
  if (this->has_stack_trace()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, *this->stack_trace_, output);
  }

  // .google.devtools.cloudtrace.v2.Span.TimeEvents time_events = 9;
  if (this->has_time_events()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        9, *this->time_events_, output);
  }

  // .google.devtools.cloudtrace.v2.Span.Links links = 10;
  if (this->has_links()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        10, *this->links_, output);
  }

  // .google.rpc.Status status = 11;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        11, *this->status_, output);
  }

  // .google.protobuf.BoolValue same_process_as_parent_span = 12;
  if (this->has_same_process_as_parent_span()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        12, *this->same_process_as_parent_span_, output);
  }

  // .google.protobuf.Int32Value child_span_count = 13;
  if (this->has_child_span_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        13, *this->child_span_count_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
             ? _internal_metadata_.unknown_fields()
             : _internal_metadata_.default_instance()),
        output);
  }
  // @@protoc_insertion_point(serialize_end:google.devtools.cloudtrace.v2.Span)
}

::google::protobuf::uint8* Span::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.devtools.cloudtrace.v2.Span)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->name().data(), static_cast<int>(this->name().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "google.devtools.cloudtrace.v2.Span.name");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string span_id = 2;
  if (this->span_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->span_id().data(), static_cast<int>(this->span_id().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "google.devtools.cloudtrace.v2.Span.span_id");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->span_id(), target);
  }

  // string parent_span_id = 3;
  if (this->parent_span_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->parent_span_id().data(),
        static_cast<int>(this->parent_span_id().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "google.devtools.cloudtrace.v2.Span.parent_span_id");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->parent_span_id(), target);
  }

  // .google.devtools.cloudtrace.v2.TruncatableString display_name = 4;
  if (this->has_display_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(4, *this->display_name_, deterministic,
                                    target);
  }

  // .google.protobuf.Timestamp start_time = 5;
  if (this->has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(5, *this->start_time_, deterministic,
                                    target);
  }

  // .google.protobuf.Timestamp end_time = 6;
  if (this->has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(6, *this->end_time_, deterministic, target);
  }

  // .google.devtools.cloudtrace.v2.Span.Attributes attributes = 7;
  if (this->has_attributes()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(7, *this->attributes_, deterministic,
                                    target);
  }

  // .google.devtools.cloudtrace.v2.StackTrace stack_trace = 8;
  if (this->has_stack_trace()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(8, *this->stack_trace_, deterministic,
                                    target);
  }

  // .google.devtools.cloudtrace.v2.Span.TimeEvents time_events = 9;
  if (this->has_time_events()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(9, *this->time_events_, deterministic,
                                    target);
  }

  // .google.devtools.cloudtrace.v2.Span.Links links = 10;
  if (this->has_links()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(10, *this->links_, deterministic, target);
  }

  // .google.rpc.Status status = 11;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(11, *this->status_, deterministic, target);
  }

  // .google.protobuf.BoolValue same_process_as_parent_span = 12;
  if (this->has_same_process_as_parent_span()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(12, *this->same_process_as_parent_span_,
                                    deterministic, target);
  }

  // .google.protobuf.Int32Value child_span_count = 13;
  if (this->has_child_span_count()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(13, *this->child_span_count_, deterministic,
                                    target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()),
            target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.devtools.cloudtrace.v2.Span)
  return target;
}

size_t Span::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:google.devtools.cloudtrace.v2.Span)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                          this->name());
  }

  // string span_id = 2;
  if (this->span_id().size() > 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                          this->span_id());
  }

  // string parent_span_id = 3;
  if (this->parent_span_id().size() > 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                          this->parent_span_id());
  }

  // .google.devtools.cloudtrace.v2.TruncatableString display_name = 4;
  if (this->has_display_name()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                          *this->display_name_);
  }

  // .google.protobuf.Timestamp start_time = 5;
  if (this->has_start_time()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                          *this->start_time_);
  }

  // .google.protobuf.Timestamp end_time = 6;
  if (this->has_end_time()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                          *this->end_time_);
  }

  // .google.devtools.cloudtrace.v2.Span.Attributes attributes = 7;
  if (this->has_attributes()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                          *this->attributes_);
  }

  // .google.devtools.cloudtrace.v2.StackTrace stack_trace = 8;
  if (this->has_stack_trace()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                          *this->stack_trace_);
  }

  // .google.devtools.cloudtrace.v2.Span.TimeEvents time_events = 9;
  if (this->has_time_events()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                          *this->time_events_);
  }

  // .google.devtools.cloudtrace.v2.Span.Links links = 10;
  if (this->has_links()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                          *this->links_);
  }

  // .google.rpc.Status status = 11;
  if (this->has_status()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                          *this->status_);
  }

  // .google.protobuf.BoolValue same_process_as_parent_span = 12;
  if (this->has_same_process_as_parent_span()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                          *this->same_process_as_parent_span_);
  }

  // .google.protobuf.Int32Value child_span_count = 13;
  if (this->has_child_span_count()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                          *this->child_span_count_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Span::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:google.devtools.cloudtrace.v2.Span)
  GOOGLE_DCHECK_NE(&from, this);
  const Span* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Span>(&from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.devtools.cloudtrace.v2.Span)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:google.devtools.cloudtrace.v2.Span)
    MergeFrom(*source);
  }
}

void Span::MergeFrom(const Span& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:google.devtools.cloudtrace.v2.Span)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from.name().size() > 0) {
    name_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.name_);
  }
  if (from.span_id().size() > 0) {
    span_id_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.span_id_);
  }
  if (from.parent_span_id().size() > 0) {
    parent_span_id_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.parent_span_id_);
  }
  if (from.has_display_name()) {
    mutable_display_name()
        ->::google::devtools::cloudtrace::v2::TruncatableString::MergeFrom(
            from.display_name());
  }
  if (from.has_start_time()) {
    mutable_start_time()->::google::protobuf::Timestamp::MergeFrom(
        from.start_time());
  }
  if (from.has_end_time()) {
    mutable_end_time()->::google::protobuf::Timestamp::MergeFrom(
        from.end_time());
  }
  if (from.has_attributes()) {
    mutable_attributes()
        ->::google::devtools::cloudtrace::v2::Span_Attributes::MergeFrom(
            from.attributes());
  }
  if (from.has_stack_trace()) {
    mutable_stack_trace()
        ->::google::devtools::cloudtrace::v2::StackTrace::MergeFrom(
            from.stack_trace());
  }
  if (from.has_time_events()) {
    mutable_time_events()
        ->::google::devtools::cloudtrace::v2::Span_TimeEvents::MergeFrom(
            from.time_events());
  }
  if (from.has_links()) {
    mutable_links()->::google::devtools::cloudtrace::v2::Span_Links::MergeFrom(
        from.links());
  }
  if (from.has_status()) {
    mutable_status()->::google::rpc::Status::MergeFrom(from.status());
  }
  if (from.has_same_process_as_parent_span()) {
    mutable_same_process_as_parent_span()
        ->::google::protobuf::BoolValue::MergeFrom(
            from.same_process_as_parent_span());
  }
  if (from.has_child_span_count()) {
    mutable_child_span_count()->::google::protobuf::Int32Value::MergeFrom(
        from.child_span_count());
  }
}

void Span::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:google.devtools.cloudtrace.v2.Span)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Span::CopyFrom(const Span& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:google.devtools.cloudtrace.v2.Span)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Span::IsInitialized() const { return true; }

void Span::Swap(Span* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Span::InternalSwap(Span* other) {
  using std::swap;
  name_.Swap(&other->name_);
  span_id_.Swap(&other->span_id_);
  parent_span_id_.Swap(&other->parent_span_id_);
  swap(display_name_, other->display_name_);
  swap(start_time_, other->start_time_);
  swap(end_time_, other->end_time_);
  swap(attributes_, other->attributes_);
  swap(stack_trace_, other->stack_trace_);
  swap(time_events_, other->time_events_);
  swap(links_, other->links_);
  swap(status_, other->status_);
  swap(same_process_as_parent_span_, other->same_process_as_parent_span_);
  swap(child_span_count_, other->child_span_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Span::GetMetadata() const {
  protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      file_level_metadata[kIndexInFileMessages];
}

// ===================================================================

void AttributeValue::InitAsDefaultInstance() {
  ::google::devtools::cloudtrace::v2::_AttributeValue_default_instance_
      .string_value_ =
      const_cast< ::google::devtools::cloudtrace::v2::TruncatableString*>(
          ::google::devtools::cloudtrace::v2::TruncatableString::
              internal_default_instance());
  ::google::devtools::cloudtrace::v2::_AttributeValue_default_instance_
      .int_value_ = GOOGLE_LONGLONG(0);
  ::google::devtools::cloudtrace::v2::_AttributeValue_default_instance_
      .bool_value_ = false;
}
void AttributeValue::set_allocated_string_value(
    ::google::devtools::cloudtrace::v2::TruncatableString* string_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (string_value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      string_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, string_value, submessage_arena);
    }
    set_has_string_value();
    value_.string_value_ = string_value;
  }
  // @@protoc_insertion_point(field_set_allocated:google.devtools.cloudtrace.v2.AttributeValue.string_value)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AttributeValue::kStringValueFieldNumber;
const int AttributeValue::kIntValueFieldNumber;
const int AttributeValue::kBoolValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AttributeValue::AttributeValue()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
        InitDefaultsAttributeValue();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.devtools.cloudtrace.v2.AttributeValue)
}
AttributeValue::AttributeValue(const AttributeValue& from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kStringValue: {
      mutable_string_value()
          ->::google::devtools::cloudtrace::v2::TruncatableString::MergeFrom(
              from.string_value());
      break;
    }
    case kIntValue: {
      set_int_value(from.int_value());
      break;
    }
    case kBoolValue: {
      set_bool_value(from.bool_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.devtools.cloudtrace.v2.AttributeValue)
}

void AttributeValue::SharedCtor() {
  clear_has_value();
  _cached_size_ = 0;
}

AttributeValue::~AttributeValue() {
  // @@protoc_insertion_point(destructor:google.devtools.cloudtrace.v2.AttributeValue)
  SharedDtor();
}

void AttributeValue::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void AttributeValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttributeValue::descriptor() {
  ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      file_level_metadata[kIndexInFileMessages]
          .descriptor;
}

const AttributeValue& AttributeValue::default_instance() {
  ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      InitDefaultsAttributeValue();
  return *internal_default_instance();
}

AttributeValue* AttributeValue::New(::google::protobuf::Arena* arena) const {
  AttributeValue* n = new AttributeValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AttributeValue::clear_value() {
  // @@protoc_insertion_point(one_of_clear_start:google.devtools.cloudtrace.v2.AttributeValue)
  switch (value_case()) {
    case kStringValue: {
      delete value_.string_value_;
      break;
    }
    case kIntValue: {
      // No need to clear
      break;
    }
    case kBoolValue: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}

void AttributeValue::Clear() {
  // @@protoc_insertion_point(message_clear_start:google.devtools.cloudtrace.v2.AttributeValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  clear_value();
  _internal_metadata_.Clear();
}

bool AttributeValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.devtools.cloudtrace.v2.AttributeValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.devtools.cloudtrace.v2.TruncatableString string_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_string_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 int_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::int64,
               ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
              input, &value_.int_value_)));
          set_has_int_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bool_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
              input, &value_.bool_value_)));
          set_has_bool_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.devtools.cloudtrace.v2.AttributeValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.devtools.cloudtrace.v2.AttributeValue)
  return false;
#undef DO_
}

void AttributeValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.devtools.cloudtrace.v2.AttributeValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // .google.devtools.cloudtrace.v2.TruncatableString string_value = 1;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, *value_.string_value_, output);
  }

  // int64 int_value = 2;
  if (has_int_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
        2, this->int_value(), output);
  }

  // bool bool_value = 3;
  if (has_bool_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
        3, this->bool_value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
             ? _internal_metadata_.unknown_fields()
             : _internal_metadata_.default_instance()),
        output);
  }
  // @@protoc_insertion_point(serialize_end:google.devtools.cloudtrace.v2.AttributeValue)
}

::google::protobuf::uint8*
AttributeValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.devtools.cloudtrace.v2.AttributeValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // .google.devtools.cloudtrace.v2.TruncatableString string_value = 1;
  if (has_string_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(1, *value_.string_value_, deterministic,
                                    target);
  }

  // int64 int_value = 2;
  if (has_int_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(
        2, this->int_value(), target);
  }

  // bool bool_value = 3;
  if (has_bool_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        3, this->bool_value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()),
            target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.devtools.cloudtrace.v2.AttributeValue)
  return target;
}

size_t AttributeValue::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:google.devtools.cloudtrace.v2.AttributeValue)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()));
  }
  switch (value_case()) {
    // .google.devtools.cloudtrace.v2.TruncatableString string_value = 1;
    case kStringValue: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                  *value_.string_value_);
      break;
    }
    // int64 int_value = 2;
    case kIntValue: {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(
                            this->int_value());
      break;
    }
    // bool bool_value = 3;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttributeValue::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:google.devtools.cloudtrace.v2.AttributeValue)
  GOOGLE_DCHECK_NE(&from, this);
  const AttributeValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<
          const AttributeValue>(&from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.devtools.cloudtrace.v2.AttributeValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:google.devtools.cloudtrace.v2.AttributeValue)
    MergeFrom(*source);
  }
}

void AttributeValue::MergeFrom(const AttributeValue& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:google.devtools.cloudtrace.v2.AttributeValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  switch (from.value_case()) {
    case kStringValue: {
      mutable_string_value()
          ->::google::devtools::cloudtrace::v2::TruncatableString::MergeFrom(
              from.string_value());
      break;
    }
    case kIntValue: {
      set_int_value(from.int_value());
      break;
    }
    case kBoolValue: {
      set_bool_value(from.bool_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void AttributeValue::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:google.devtools.cloudtrace.v2.AttributeValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttributeValue::CopyFrom(const AttributeValue& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:google.devtools.cloudtrace.v2.AttributeValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttributeValue::IsInitialized() const { return true; }

void AttributeValue::Swap(AttributeValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AttributeValue::InternalSwap(AttributeValue* other) {
  using std::swap;
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AttributeValue::GetMetadata() const {
  protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      file_level_metadata[kIndexInFileMessages];
}

// ===================================================================

void StackTrace_StackFrame::InitAsDefaultInstance() {
  ::google::devtools::cloudtrace::v2::_StackTrace_StackFrame_default_instance_
      ._instance.get_mutable()
      ->function_name_ =
      const_cast< ::google::devtools::cloudtrace::v2::TruncatableString*>(
          ::google::devtools::cloudtrace::v2::TruncatableString::
              internal_default_instance());
  ::google::devtools::cloudtrace::v2::_StackTrace_StackFrame_default_instance_
      ._instance.get_mutable()
      ->original_function_name_ =
      const_cast< ::google::devtools::cloudtrace::v2::TruncatableString*>(
          ::google::devtools::cloudtrace::v2::TruncatableString::
              internal_default_instance());
  ::google::devtools::cloudtrace::v2::_StackTrace_StackFrame_default_instance_
      ._instance.get_mutable()
      ->file_name_ =
      const_cast< ::google::devtools::cloudtrace::v2::TruncatableString*>(
          ::google::devtools::cloudtrace::v2::TruncatableString::
              internal_default_instance());
  ::google::devtools::cloudtrace::v2::_StackTrace_StackFrame_default_instance_
      ._instance.get_mutable()
      ->load_module_ = const_cast< ::google::devtools::cloudtrace::v2::Module*>(
      ::google::devtools::cloudtrace::v2::Module::internal_default_instance());
  ::google::devtools::cloudtrace::v2::_StackTrace_StackFrame_default_instance_
      ._instance.get_mutable()
      ->source_version_ =
      const_cast< ::google::devtools::cloudtrace::v2::TruncatableString*>(
          ::google::devtools::cloudtrace::v2::TruncatableString::
              internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StackTrace_StackFrame::kFunctionNameFieldNumber;
const int StackTrace_StackFrame::kOriginalFunctionNameFieldNumber;
const int StackTrace_StackFrame::kFileNameFieldNumber;
const int StackTrace_StackFrame::kLineNumberFieldNumber;
const int StackTrace_StackFrame::kColumnNumberFieldNumber;
const int StackTrace_StackFrame::kLoadModuleFieldNumber;
const int StackTrace_StackFrame::kSourceVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StackTrace_StackFrame::StackTrace_StackFrame()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
        InitDefaultsStackTrace_StackFrame();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.devtools.cloudtrace.v2.StackTrace.StackFrame)
}
StackTrace_StackFrame::StackTrace_StackFrame(const StackTrace_StackFrame& from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_function_name()) {
    function_name_ = new ::google::devtools::cloudtrace::v2::TruncatableString(
        *from.function_name_);
  } else {
    function_name_ = NULL;
  }
  if (from.has_original_function_name()) {
    original_function_name_ =
        new ::google::devtools::cloudtrace::v2::TruncatableString(
            *from.original_function_name_);
  } else {
    original_function_name_ = NULL;
  }
  if (from.has_file_name()) {
    file_name_ = new ::google::devtools::cloudtrace::v2::TruncatableString(
        *from.file_name_);
  } else {
    file_name_ = NULL;
  }
  if (from.has_load_module()) {
    load_module_ =
        new ::google::devtools::cloudtrace::v2::Module(*from.load_module_);
  } else {
    load_module_ = NULL;
  }
  if (from.has_source_version()) {
    source_version_ = new ::google::devtools::cloudtrace::v2::TruncatableString(
        *from.source_version_);
  } else {
    source_version_ = NULL;
  }
  ::memcpy(&line_number_, &from.line_number_,
           static_cast<size_t>(reinterpret_cast<char*>(&column_number_) -
                               reinterpret_cast<char*>(&line_number_)) +
               sizeof(column_number_));
  // @@protoc_insertion_point(copy_constructor:google.devtools.cloudtrace.v2.StackTrace.StackFrame)
}

void StackTrace_StackFrame::SharedCtor() {
  ::memset(&function_name_, 0,
           static_cast<size_t>(reinterpret_cast<char*>(&column_number_) -
                               reinterpret_cast<char*>(&function_name_)) +
               sizeof(column_number_));
  _cached_size_ = 0;
}

StackTrace_StackFrame::~StackTrace_StackFrame() {
  // @@protoc_insertion_point(destructor:google.devtools.cloudtrace.v2.StackTrace.StackFrame)
  SharedDtor();
}

void StackTrace_StackFrame::SharedDtor() {
  if (this != internal_default_instance()) delete function_name_;
  if (this != internal_default_instance()) delete original_function_name_;
  if (this != internal_default_instance()) delete file_name_;
  if (this != internal_default_instance()) delete load_module_;
  if (this != internal_default_instance()) delete source_version_;
}

void StackTrace_StackFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StackTrace_StackFrame::descriptor() {
  ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      file_level_metadata[kIndexInFileMessages]
          .descriptor;
}

const StackTrace_StackFrame& StackTrace_StackFrame::default_instance() {
  ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      InitDefaultsStackTrace_StackFrame();
  return *internal_default_instance();
}

StackTrace_StackFrame* StackTrace_StackFrame::New(
    ::google::protobuf::Arena* arena) const {
  StackTrace_StackFrame* n = new StackTrace_StackFrame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StackTrace_StackFrame::Clear() {
  // @@protoc_insertion_point(message_clear_start:google.devtools.cloudtrace.v2.StackTrace.StackFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (GetArenaNoVirtual() == NULL && function_name_ != NULL) {
    delete function_name_;
  }
  function_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && original_function_name_ != NULL) {
    delete original_function_name_;
  }
  original_function_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && file_name_ != NULL) {
    delete file_name_;
  }
  file_name_ = NULL;
  if (GetArenaNoVirtual() == NULL && load_module_ != NULL) {
    delete load_module_;
  }
  load_module_ = NULL;
  if (GetArenaNoVirtual() == NULL && source_version_ != NULL) {
    delete source_version_;
  }
  source_version_ = NULL;
  ::memset(&line_number_, 0,
           static_cast<size_t>(reinterpret_cast<char*>(&column_number_) -
                               reinterpret_cast<char*>(&line_number_)) +
               sizeof(column_number_));
  _internal_metadata_.Clear();
}

bool StackTrace_StackFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.devtools.cloudtrace.v2.StackTrace.StackFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.devtools.cloudtrace.v2.TruncatableString function_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_function_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.devtools.cloudtrace.v2.TruncatableString original_function_name
      // = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_original_function_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.devtools.cloudtrace.v2.TruncatableString file_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_file_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 line_number = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::int64,
               ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
              input, &line_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 column_number = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::int64,
               ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
              input, &column_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.devtools.cloudtrace.v2.Module load_module = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_load_module()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.devtools.cloudtrace.v2.TruncatableString source_version = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_source_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.devtools.cloudtrace.v2.StackTrace.StackFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.devtools.cloudtrace.v2.StackTrace.StackFrame)
  return false;
#undef DO_
}

void StackTrace_StackFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.devtools.cloudtrace.v2.StackTrace.StackFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // .google.devtools.cloudtrace.v2.TruncatableString function_name = 1;
  if (this->has_function_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, *this->function_name_, output);
  }

  // .google.devtools.cloudtrace.v2.TruncatableString original_function_name =
  // 2;
  if (this->has_original_function_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *this->original_function_name_, output);
  }

  // .google.devtools.cloudtrace.v2.TruncatableString file_name = 3;
  if (this->has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, *this->file_name_, output);
  }

  // int64 line_number = 4;
  if (this->line_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
        4, this->line_number(), output);
  }

  // int64 column_number = 5;
  if (this->column_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
        5, this->column_number(), output);
  }

  // .google.devtools.cloudtrace.v2.Module load_module = 6;
  if (this->has_load_module()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, *this->load_module_, output);
  }

  // .google.devtools.cloudtrace.v2.TruncatableString source_version = 7;
  if (this->has_source_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, *this->source_version_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
             ? _internal_metadata_.unknown_fields()
             : _internal_metadata_.default_instance()),
        output);
  }
  // @@protoc_insertion_point(serialize_end:google.devtools.cloudtrace.v2.StackTrace.StackFrame)
}

::google::protobuf::uint8*
StackTrace_StackFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.devtools.cloudtrace.v2.StackTrace.StackFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // .google.devtools.cloudtrace.v2.TruncatableString function_name = 1;
  if (this->has_function_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(1, *this->function_name_, deterministic,
                                    target);
  }

  // .google.devtools.cloudtrace.v2.TruncatableString original_function_name =
  // 2;
  if (this->has_original_function_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(2, *this->original_function_name_,
                                    deterministic, target);
  }

  // .google.devtools.cloudtrace.v2.TruncatableString file_name = 3;
  if (this->has_file_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(3, *this->file_name_, deterministic,
                                    target);
  }

  // int64 line_number = 4;
  if (this->line_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(
        4, this->line_number(), target);
  }

  // int64 column_number = 5;
  if (this->column_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(
        5, this->column_number(), target);
  }

  // .google.devtools.cloudtrace.v2.Module load_module = 6;
  if (this->has_load_module()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(6, *this->load_module_, deterministic,
                                    target);
  }

  // .google.devtools.cloudtrace.v2.TruncatableString source_version = 7;
  if (this->has_source_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(7, *this->source_version_, deterministic,
                                    target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()),
            target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.devtools.cloudtrace.v2.StackTrace.StackFrame)
  return target;
}

size_t StackTrace_StackFrame::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:google.devtools.cloudtrace.v2.StackTrace.StackFrame)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()));
  }
  // .google.devtools.cloudtrace.v2.TruncatableString function_name = 1;
  if (this->has_function_name()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                          *this->function_name_);
  }

  // .google.devtools.cloudtrace.v2.TruncatableString original_function_name =
  // 2;
  if (this->has_original_function_name()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                          *this->original_function_name_);
  }

  // .google.devtools.cloudtrace.v2.TruncatableString file_name = 3;
  if (this->has_file_name()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                          *this->file_name_);
  }

  // .google.devtools.cloudtrace.v2.Module load_module = 6;
  if (this->has_load_module()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                          *this->load_module_);
  }

  // .google.devtools.cloudtrace.v2.TruncatableString source_version = 7;
  if (this->has_source_version()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                          *this->source_version_);
  }

  // int64 line_number = 4;
  if (this->line_number() != 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(
                          this->line_number());
  }

  // int64 column_number = 5;
  if (this->column_number() != 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(
                          this->column_number());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StackTrace_StackFrame::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:google.devtools.cloudtrace.v2.StackTrace.StackFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const StackTrace_StackFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<
          const StackTrace_StackFrame>(&from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.devtools.cloudtrace.v2.StackTrace.StackFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:google.devtools.cloudtrace.v2.StackTrace.StackFrame)
    MergeFrom(*source);
  }
}

void StackTrace_StackFrame::MergeFrom(const StackTrace_StackFrame& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:google.devtools.cloudtrace.v2.StackTrace.StackFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from.has_function_name()) {
    mutable_function_name()
        ->::google::devtools::cloudtrace::v2::TruncatableString::MergeFrom(
            from.function_name());
  }
  if (from.has_original_function_name()) {
    mutable_original_function_name()
        ->::google::devtools::cloudtrace::v2::TruncatableString::MergeFrom(
            from.original_function_name());
  }
  if (from.has_file_name()) {
    mutable_file_name()
        ->::google::devtools::cloudtrace::v2::TruncatableString::MergeFrom(
            from.file_name());
  }
  if (from.has_load_module()) {
    mutable_load_module()
        ->::google::devtools::cloudtrace::v2::Module::MergeFrom(
            from.load_module());
  }
  if (from.has_source_version()) {
    mutable_source_version()
        ->::google::devtools::cloudtrace::v2::TruncatableString::MergeFrom(
            from.source_version());
  }
  if (from.line_number() != 0) {
    set_line_number(from.line_number());
  }
  if (from.column_number() != 0) {
    set_column_number(from.column_number());
  }
}

void StackTrace_StackFrame::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:google.devtools.cloudtrace.v2.StackTrace.StackFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StackTrace_StackFrame::CopyFrom(const StackTrace_StackFrame& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:google.devtools.cloudtrace.v2.StackTrace.StackFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StackTrace_StackFrame::IsInitialized() const { return true; }

void StackTrace_StackFrame::Swap(StackTrace_StackFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StackTrace_StackFrame::InternalSwap(StackTrace_StackFrame* other) {
  using std::swap;
  swap(function_name_, other->function_name_);
  swap(original_function_name_, other->original_function_name_);
  swap(file_name_, other->file_name_);
  swap(load_module_, other->load_module_);
  swap(source_version_, other->source_version_);
  swap(line_number_, other->line_number_);
  swap(column_number_, other->column_number_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StackTrace_StackFrame::GetMetadata() const {
  protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      file_level_metadata[kIndexInFileMessages];
}

// ===================================================================

void StackTrace_StackFrames::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StackTrace_StackFrames::kFrameFieldNumber;
const int StackTrace_StackFrames::kDroppedFramesCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StackTrace_StackFrames::StackTrace_StackFrames()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
        InitDefaultsStackTrace_StackFrames();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.devtools.cloudtrace.v2.StackTrace.StackFrames)
}
StackTrace_StackFrames::StackTrace_StackFrames(
    const StackTrace_StackFrames& from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      frame_(from.frame_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dropped_frames_count_ = from.dropped_frames_count_;
  // @@protoc_insertion_point(copy_constructor:google.devtools.cloudtrace.v2.StackTrace.StackFrames)
}

void StackTrace_StackFrames::SharedCtor() {
  dropped_frames_count_ = 0;
  _cached_size_ = 0;
}

StackTrace_StackFrames::~StackTrace_StackFrames() {
  // @@protoc_insertion_point(destructor:google.devtools.cloudtrace.v2.StackTrace.StackFrames)
  SharedDtor();
}

void StackTrace_StackFrames::SharedDtor() {}

void StackTrace_StackFrames::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StackTrace_StackFrames::descriptor() {
  ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      file_level_metadata[kIndexInFileMessages]
          .descriptor;
}

const StackTrace_StackFrames& StackTrace_StackFrames::default_instance() {
  ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      InitDefaultsStackTrace_StackFrames();
  return *internal_default_instance();
}

StackTrace_StackFrames* StackTrace_StackFrames::New(
    ::google::protobuf::Arena* arena) const {
  StackTrace_StackFrames* n = new StackTrace_StackFrames;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StackTrace_StackFrames::Clear() {
  // @@protoc_insertion_point(message_clear_start:google.devtools.cloudtrace.v2.StackTrace.StackFrames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  frame_.Clear();
  dropped_frames_count_ = 0;
  _internal_metadata_.Clear();
}

bool StackTrace_StackFrames::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.devtools.cloudtrace.v2.StackTrace.StackFrames)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame =
      // 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, add_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dropped_frames_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::int32,
               ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &dropped_frames_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.devtools.cloudtrace.v2.StackTrace.StackFrames)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.devtools.cloudtrace.v2.StackTrace.StackFrames)
  return false;
#undef DO_
}

void StackTrace_StackFrames::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.devtools.cloudtrace.v2.StackTrace.StackFrames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;
  for (unsigned int i = 0, n = static_cast<unsigned int>(this->frame_size());
       i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->frame(static_cast<int>(i)), output);
  }

  // int32 dropped_frames_count = 2;
  if (this->dropped_frames_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        2, this->dropped_frames_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
             ? _internal_metadata_.unknown_fields()
             : _internal_metadata_.default_instance()),
        output);
  }
  // @@protoc_insertion_point(serialize_end:google.devtools.cloudtrace.v2.StackTrace.StackFrames)
}

::google::protobuf::uint8*
StackTrace_StackFrames::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.devtools.cloudtrace.v2.StackTrace.StackFrames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;
  for (unsigned int i = 0, n = static_cast<unsigned int>(this->frame_size());
       i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(1, this->frame(static_cast<int>(i)),
                                    deterministic, target);
  }

  // int32 dropped_frames_count = 2;
  if (this->dropped_frames_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        2, this->dropped_frames_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()),
            target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.devtools.cloudtrace.v2.StackTrace.StackFrames)
  return target;
}

size_t StackTrace_StackFrames::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:google.devtools.cloudtrace.v2.StackTrace.StackFrames)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()));
  }
  // repeated .google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->frame_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->frame(static_cast<int>(i)));
    }
  }

  // int32 dropped_frames_count = 2;
  if (this->dropped_frames_count() != 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                          this->dropped_frames_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StackTrace_StackFrames::MergeFrom(
    const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:google.devtools.cloudtrace.v2.StackTrace.StackFrames)
  GOOGLE_DCHECK_NE(&from, this);
  const StackTrace_StackFrames* source =
      ::google::protobuf::internal::DynamicCastToGenerated<
          const StackTrace_StackFrames>(&from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.devtools.cloudtrace.v2.StackTrace.StackFrames)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:google.devtools.cloudtrace.v2.StackTrace.StackFrames)
    MergeFrom(*source);
  }
}

void StackTrace_StackFrames::MergeFrom(const StackTrace_StackFrames& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:google.devtools.cloudtrace.v2.StackTrace.StackFrames)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  frame_.MergeFrom(from.frame_);
  if (from.dropped_frames_count() != 0) {
    set_dropped_frames_count(from.dropped_frames_count());
  }
}

void StackTrace_StackFrames::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:google.devtools.cloudtrace.v2.StackTrace.StackFrames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StackTrace_StackFrames::CopyFrom(const StackTrace_StackFrames& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:google.devtools.cloudtrace.v2.StackTrace.StackFrames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StackTrace_StackFrames::IsInitialized() const { return true; }

void StackTrace_StackFrames::Swap(StackTrace_StackFrames* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StackTrace_StackFrames::InternalSwap(StackTrace_StackFrames* other) {
  using std::swap;
  frame_.InternalSwap(&other->frame_);
  swap(dropped_frames_count_, other->dropped_frames_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StackTrace_StackFrames::GetMetadata() const {
  protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      file_level_metadata[kIndexInFileMessages];
}

// ===================================================================

void StackTrace::InitAsDefaultInstance() {
  ::google::devtools::cloudtrace::v2::_StackTrace_default_instance_._instance
      .get_mutable()
      ->stack_frames_ =
      const_cast< ::google::devtools::cloudtrace::v2::StackTrace_StackFrames*>(
          ::google::devtools::cloudtrace::v2::StackTrace_StackFrames::
              internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StackTrace::kStackFramesFieldNumber;
const int StackTrace::kStackTraceHashIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StackTrace::StackTrace()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
        InitDefaultsStackTrace();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.devtools.cloudtrace.v2.StackTrace)
}
StackTrace::StackTrace(const StackTrace& from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stack_frames()) {
    stack_frames_ =
        new ::google::devtools::cloudtrace::v2::StackTrace_StackFrames(
            *from.stack_frames_);
  } else {
    stack_frames_ = NULL;
  }
  stack_trace_hash_id_ = from.stack_trace_hash_id_;
  // @@protoc_insertion_point(copy_constructor:google.devtools.cloudtrace.v2.StackTrace)
}

void StackTrace::SharedCtor() {
  ::memset(&stack_frames_, 0,
           static_cast<size_t>(reinterpret_cast<char*>(&stack_trace_hash_id_) -
                               reinterpret_cast<char*>(&stack_frames_)) +
               sizeof(stack_trace_hash_id_));
  _cached_size_ = 0;
}

StackTrace::~StackTrace() {
  // @@protoc_insertion_point(destructor:google.devtools.cloudtrace.v2.StackTrace)
  SharedDtor();
}

void StackTrace::SharedDtor() {
  if (this != internal_default_instance()) delete stack_frames_;
}

void StackTrace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StackTrace::descriptor() {
  ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      file_level_metadata[kIndexInFileMessages]
          .descriptor;
}

const StackTrace& StackTrace::default_instance() {
  ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      InitDefaultsStackTrace();
  return *internal_default_instance();
}

StackTrace* StackTrace::New(::google::protobuf::Arena* arena) const {
  StackTrace* n = new StackTrace;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StackTrace::Clear() {
  // @@protoc_insertion_point(message_clear_start:google.devtools.cloudtrace.v2.StackTrace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (GetArenaNoVirtual() == NULL && stack_frames_ != NULL) {
    delete stack_frames_;
  }
  stack_frames_ = NULL;
  stack_trace_hash_id_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool StackTrace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.devtools.cloudtrace.v2.StackTrace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.devtools.cloudtrace.v2.StackTrace.StackFrames stack_frames = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_stack_frames()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 stack_trace_hash_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::int64,
               ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
              input, &stack_trace_hash_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.devtools.cloudtrace.v2.StackTrace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.devtools.cloudtrace.v2.StackTrace)
  return false;
#undef DO_
}

void StackTrace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.devtools.cloudtrace.v2.StackTrace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // .google.devtools.cloudtrace.v2.StackTrace.StackFrames stack_frames = 1;
  if (this->has_stack_frames()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, *this->stack_frames_, output);
  }

  // int64 stack_trace_hash_id = 2;
  if (this->stack_trace_hash_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
        2, this->stack_trace_hash_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
             ? _internal_metadata_.unknown_fields()
             : _internal_metadata_.default_instance()),
        output);
  }
  // @@protoc_insertion_point(serialize_end:google.devtools.cloudtrace.v2.StackTrace)
}

::google::protobuf::uint8* StackTrace::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.devtools.cloudtrace.v2.StackTrace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // .google.devtools.cloudtrace.v2.StackTrace.StackFrames stack_frames = 1;
  if (this->has_stack_frames()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(1, *this->stack_frames_, deterministic,
                                    target);
  }

  // int64 stack_trace_hash_id = 2;
  if (this->stack_trace_hash_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(
        2, this->stack_trace_hash_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()),
            target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.devtools.cloudtrace.v2.StackTrace)
  return target;
}

size_t StackTrace::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:google.devtools.cloudtrace.v2.StackTrace)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()));
  }
  // .google.devtools.cloudtrace.v2.StackTrace.StackFrames stack_frames = 1;
  if (this->has_stack_frames()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                          *this->stack_frames_);
  }

  // int64 stack_trace_hash_id = 2;
  if (this->stack_trace_hash_id() != 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(
                          this->stack_trace_hash_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StackTrace::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:google.devtools.cloudtrace.v2.StackTrace)
  GOOGLE_DCHECK_NE(&from, this);
  const StackTrace* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StackTrace>(
          &from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.devtools.cloudtrace.v2.StackTrace)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:google.devtools.cloudtrace.v2.StackTrace)
    MergeFrom(*source);
  }
}

void StackTrace::MergeFrom(const StackTrace& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:google.devtools.cloudtrace.v2.StackTrace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from.has_stack_frames()) {
    mutable_stack_frames()
        ->::google::devtools::cloudtrace::v2::StackTrace_StackFrames::MergeFrom(
            from.stack_frames());
  }
  if (from.stack_trace_hash_id() != 0) {
    set_stack_trace_hash_id(from.stack_trace_hash_id());
  }
}

void StackTrace::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:google.devtools.cloudtrace.v2.StackTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StackTrace::CopyFrom(const StackTrace& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:google.devtools.cloudtrace.v2.StackTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StackTrace::IsInitialized() const { return true; }

void StackTrace::Swap(StackTrace* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StackTrace::InternalSwap(StackTrace* other) {
  using std::swap;
  swap(stack_frames_, other->stack_frames_);
  swap(stack_trace_hash_id_, other->stack_trace_hash_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StackTrace::GetMetadata() const {
  protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      file_level_metadata[kIndexInFileMessages];
}

// ===================================================================

void Module::InitAsDefaultInstance() {
  ::google::devtools::cloudtrace::v2::_Module_default_instance_._instance
      .get_mutable()
      ->module_ =
      const_cast< ::google::devtools::cloudtrace::v2::TruncatableString*>(
          ::google::devtools::cloudtrace::v2::TruncatableString::
              internal_default_instance());
  ::google::devtools::cloudtrace::v2::_Module_default_instance_._instance
      .get_mutable()
      ->build_id_ =
      const_cast< ::google::devtools::cloudtrace::v2::TruncatableString*>(
          ::google::devtools::cloudtrace::v2::TruncatableString::
              internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Module::kModuleFieldNumber;
const int Module::kBuildIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Module::Module() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
        InitDefaultsModule();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.devtools.cloudtrace.v2.Module)
}
Module::Module(const Module& from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_module()) {
    module_ = new ::google::devtools::cloudtrace::v2::TruncatableString(
        *from.module_);
  } else {
    module_ = NULL;
  }
  if (from.has_build_id()) {
    build_id_ = new ::google::devtools::cloudtrace::v2::TruncatableString(
        *from.build_id_);
  } else {
    build_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.devtools.cloudtrace.v2.Module)
}

void Module::SharedCtor() {
  ::memset(&module_, 0,
           static_cast<size_t>(reinterpret_cast<char*>(&build_id_) -
                               reinterpret_cast<char*>(&module_)) +
               sizeof(build_id_));
  _cached_size_ = 0;
}

Module::~Module() {
  // @@protoc_insertion_point(destructor:google.devtools.cloudtrace.v2.Module)
  SharedDtor();
}

void Module::SharedDtor() {
  if (this != internal_default_instance()) delete module_;
  if (this != internal_default_instance()) delete build_id_;
}

void Module::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Module::descriptor() {
  ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      file_level_metadata[kIndexInFileMessages]
          .descriptor;
}

const Module& Module::default_instance() {
  ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      InitDefaultsModule();
  return *internal_default_instance();
}

Module* Module::New(::google::protobuf::Arena* arena) const {
  Module* n = new Module;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Module::Clear() {
  // @@protoc_insertion_point(message_clear_start:google.devtools.cloudtrace.v2.Module)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (GetArenaNoVirtual() == NULL && module_ != NULL) {
    delete module_;
  }
  module_ = NULL;
  if (GetArenaNoVirtual() == NULL && build_id_ != NULL) {
    delete build_id_;
  }
  build_id_ = NULL;
  _internal_metadata_.Clear();
}

bool Module::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.devtools.cloudtrace.v2.Module)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.devtools.cloudtrace.v2.TruncatableString module = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_module()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.devtools.cloudtrace.v2.TruncatableString build_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, mutable_build_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.devtools.cloudtrace.v2.Module)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.devtools.cloudtrace.v2.Module)
  return false;
#undef DO_
}

void Module::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.devtools.cloudtrace.v2.Module)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // .google.devtools.cloudtrace.v2.TruncatableString module = 1;
  if (this->has_module()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, *this->module_, output);
  }

  // .google.devtools.cloudtrace.v2.TruncatableString build_id = 2;
  if (this->has_build_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *this->build_id_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
             ? _internal_metadata_.unknown_fields()
             : _internal_metadata_.default_instance()),
        output);
  }
  // @@protoc_insertion_point(serialize_end:google.devtools.cloudtrace.v2.Module)
}

::google::protobuf::uint8* Module::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.devtools.cloudtrace.v2.Module)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // .google.devtools.cloudtrace.v2.TruncatableString module = 1;
  if (this->has_module()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(1, *this->module_, deterministic, target);
  }

  // .google.devtools.cloudtrace.v2.TruncatableString build_id = 2;
  if (this->has_build_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(2, *this->build_id_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()),
            target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.devtools.cloudtrace.v2.Module)
  return target;
}

size_t Module::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:google.devtools.cloudtrace.v2.Module)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()));
  }
  // .google.devtools.cloudtrace.v2.TruncatableString module = 1;
  if (this->has_module()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                          *this->module_);
  }

  // .google.devtools.cloudtrace.v2.TruncatableString build_id = 2;
  if (this->has_build_id()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                          *this->build_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Module::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:google.devtools.cloudtrace.v2.Module)
  GOOGLE_DCHECK_NE(&from, this);
  const Module* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Module>(&from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.devtools.cloudtrace.v2.Module)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:google.devtools.cloudtrace.v2.Module)
    MergeFrom(*source);
  }
}

void Module::MergeFrom(const Module& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:google.devtools.cloudtrace.v2.Module)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from.has_module()) {
    mutable_module()
        ->::google::devtools::cloudtrace::v2::TruncatableString::MergeFrom(
            from.module());
  }
  if (from.has_build_id()) {
    mutable_build_id()
        ->::google::devtools::cloudtrace::v2::TruncatableString::MergeFrom(
            from.build_id());
  }
}

void Module::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:google.devtools.cloudtrace.v2.Module)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Module::CopyFrom(const Module& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:google.devtools.cloudtrace.v2.Module)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Module::IsInitialized() const { return true; }

void Module::Swap(Module* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Module::InternalSwap(Module* other) {
  using std::swap;
  swap(module_, other->module_);
  swap(build_id_, other->build_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Module::GetMetadata() const {
  protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      file_level_metadata[kIndexInFileMessages];
}

// ===================================================================

void TruncatableString::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TruncatableString::kValueFieldNumber;
const int TruncatableString::kTruncatedByteCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TruncatableString::TruncatableString()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
        InitDefaultsTruncatableString();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.devtools.cloudtrace.v2.TruncatableString)
}
TruncatableString::TruncatableString(const TruncatableString& from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.value_);
  }
  truncated_byte_count_ = from.truncated_byte_count_;
  // @@protoc_insertion_point(copy_constructor:google.devtools.cloudtrace.v2.TruncatableString)
}

void TruncatableString::SharedCtor() {
  value_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  truncated_byte_count_ = 0;
  _cached_size_ = 0;
}

TruncatableString::~TruncatableString() {
  // @@protoc_insertion_point(destructor:google.devtools.cloudtrace.v2.TruncatableString)
  SharedDtor();
}

void TruncatableString::SharedDtor() {
  value_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TruncatableString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TruncatableString::descriptor() {
  ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      file_level_metadata[kIndexInFileMessages]
          .descriptor;
}

const TruncatableString& TruncatableString::default_instance() {
  ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      InitDefaultsTruncatableString();
  return *internal_default_instance();
}

TruncatableString* TruncatableString::New(
    ::google::protobuf::Arena* arena) const {
  TruncatableString* n = new TruncatableString;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TruncatableString::Clear() {
  // @@protoc_insertion_point(message_clear_start:google.devtools.cloudtrace.v2.TruncatableString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  value_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  truncated_byte_count_ = 0;
  _internal_metadata_.Clear();
}

bool TruncatableString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.devtools.cloudtrace.v2.TruncatableString)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->value().data(), static_cast<int>(this->value().length()),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "google.devtools.cloudtrace.v2.TruncatableString.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 truncated_byte_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::int32,
               ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &truncated_byte_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.devtools.cloudtrace.v2.TruncatableString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.devtools.cloudtrace.v2.TruncatableString)
  return false;
#undef DO_
}

void TruncatableString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.devtools.cloudtrace.v2.TruncatableString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->value().data(), static_cast<int>(this->value().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "google.devtools.cloudtrace.v2.TruncatableString.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        1, this->value(), output);
  }

  // int32 truncated_byte_count = 2;
  if (this->truncated_byte_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        2, this->truncated_byte_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
             ? _internal_metadata_.unknown_fields()
             : _internal_metadata_.default_instance()),
        output);
  }
  // @@protoc_insertion_point(serialize_end:google.devtools.cloudtrace.v2.TruncatableString)
}

::google::protobuf::uint8*
TruncatableString::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.devtools.cloudtrace.v2.TruncatableString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->value().data(), static_cast<int>(this->value().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "google.devtools.cloudtrace.v2.TruncatableString.value");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  // int32 truncated_byte_count = 2;
  if (this->truncated_byte_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        2, this->truncated_byte_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()),
            target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.devtools.cloudtrace.v2.TruncatableString)
  return target;
}

size_t TruncatableString::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:google.devtools.cloudtrace.v2.TruncatableString)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()));
  }
  // string value = 1;
  if (this->value().size() > 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                          this->value());
  }

  // int32 truncated_byte_count = 2;
  if (this->truncated_byte_count() != 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                          this->truncated_byte_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TruncatableString::MergeFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:google.devtools.cloudtrace.v2.TruncatableString)
  GOOGLE_DCHECK_NE(&from, this);
  const TruncatableString* source =
      ::google::protobuf::internal::DynamicCastToGenerated<
          const TruncatableString>(&from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.devtools.cloudtrace.v2.TruncatableString)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:google.devtools.cloudtrace.v2.TruncatableString)
    MergeFrom(*source);
  }
}

void TruncatableString::MergeFrom(const TruncatableString& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:google.devtools.cloudtrace.v2.TruncatableString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from.value().size() > 0) {
    value_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.value_);
  }
  if (from.truncated_byte_count() != 0) {
    set_truncated_byte_count(from.truncated_byte_count());
  }
}

void TruncatableString::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:google.devtools.cloudtrace.v2.TruncatableString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TruncatableString::CopyFrom(const TruncatableString& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:google.devtools.cloudtrace.v2.TruncatableString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TruncatableString::IsInitialized() const { return true; }

void TruncatableString::Swap(TruncatableString* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TruncatableString::InternalSwap(TruncatableString* other) {
  using std::swap;
  value_.Swap(&other->value_);
  swap(truncated_byte_count_, other->truncated_byte_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TruncatableString::GetMetadata() const {
  protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      file_level_metadata[kIndexInFileMessages];
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace cloudtrace
}  // namespace devtools
}  // namespace google

// @@protoc_insertion_point(global_scope)
