// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/cloudtrace/v2/tracing.proto

#include "google/devtools/cloudtrace/v2/tracing.pb.h"

#include <algorithm>

#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format.h>
#include <google/protobuf/wire_format_lite_inl.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace google {
namespace devtools {
namespace cloudtrace {
namespace v2 {
class BatchWriteSpansRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BatchWriteSpansRequest>
      _instance;
} _BatchWriteSpansRequest_default_instance_;
}  // namespace v2
}  // namespace cloudtrace
}  // namespace devtools
}  // namespace google
namespace protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftracing_2eproto {
void InitDefaultsBatchWriteSpansRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      InitDefaultsSpan();
  {
    void* ptr = &::google::devtools::cloudtrace::v2::
                    _BatchWriteSpansRequest_default_instance_;
    new (ptr)::google::devtools::cloudtrace::v2::BatchWriteSpansRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::devtools::cloudtrace::v2::BatchWriteSpansRequest::
      InitAsDefaultInstance();
}

void InitDefaultsBatchWriteSpansRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once,
                                     &InitDefaultsBatchWriteSpansRequestImpl);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32
    TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::BatchWriteSpansRequest,
            _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::BatchWriteSpansRequest, name_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::google::devtools::cloudtrace::v2::BatchWriteSpansRequest, spans_),
};
static const ::google::protobuf::internal::MigrationSchema
    schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1,
         sizeof(::google::devtools::cloudtrace::v2::BatchWriteSpansRequest)},
};

static ::google::protobuf::Message const* const file_default_instances[] = {
    reinterpret_cast<const ::google::protobuf::Message*>(
        &::google::devtools::cloudtrace::v2::
            _BatchWriteSpansRequest_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors("google/devtools/cloudtrace/v2/tracing.proto", schemas,
                    file_default_instances, TableStruct::offsets, factory,
                    file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&)
    GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(
      protodesc_cold) = {
      "\n+google/devtools/cloudtrace/v2/tracing."
      "proto\022\035google.devtools.cloudtrace.v2\032\034go"
      "ogle/api/annotations.proto\032)google/devto"
      "ols/cloudtrace/v2/trace.proto\032\033google/pr"
      "otobuf/empty.proto\032\037google/protobuf/time"
      "stamp.proto\"Z\n\026BatchWriteSpansRequest\022\014\n"
      "\004name\030\001 \001(\t\0222\n\005spans\030\002 \003(\0132#.google.devt"
      "ools.cloudtrace.v2.Span2\257\002\n\014TraceService"
      "\022\224\001\n\017BatchWriteSpans\0225.google.devtools.c"
      "loudtrace.v2.BatchWriteSpansRequest\032\026.go"
      "ogle.protobuf.Empty\"2\202\323\344\223\002,\"\'/v2/{name=p"
      "rojects/*}/traces:batchWrite:\001*\022\207\001\n\nCrea"
      "teSpan\022#.google.devtools.cloudtrace.v2.S"
      "pan\032#.google.devtools.cloudtrace.v2.Span"
      "\"/\202\323\344\223\002)\"$/v2/{name=projects/*/traces/*}"
      "/spans:\001*B\254\001\n!com.google.devtools.cloudt"
      "race.v2B\014TracingProtoP\001ZGgoogle.golang.o"
      "rg/genproto/googleapis/devtools/cloudtra"
      "ce/v2;cloudtrace\252\002\025Google.Cloud.Trace.V2"
      "\312\002\025Google\\Cloud\\Trace\\V2b\006proto3"};
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(descriptor, 792);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
      "google/devtools/cloudtrace/v2/tracing.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftrace_2eproto::
      AddDescriptors();
  ::protobuf_google_2fprotobuf_2fempty_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() { AddDescriptors(); }
} static_descriptor_initializer;
}  // namespace protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftracing_2eproto
namespace google {
namespace devtools {
namespace cloudtrace {
namespace v2 {

// ===================================================================

void BatchWriteSpansRequest::InitAsDefaultInstance() {}
void BatchWriteSpansRequest::clear_spans() { spans_.Clear(); }
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchWriteSpansRequest::kNameFieldNumber;
const int BatchWriteSpansRequest::kSpansFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchWriteSpansRequest::BatchWriteSpansRequest()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftracing_2eproto::
        InitDefaultsBatchWriteSpansRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.devtools.cloudtrace.v2.BatchWriteSpansRequest)
}
BatchWriteSpansRequest::BatchWriteSpansRequest(
    const BatchWriteSpansRequest& from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      spans_(from.spans_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.devtools.cloudtrace.v2.BatchWriteSpansRequest)
}

void BatchWriteSpansRequest::SharedCtor() {
  name_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

BatchWriteSpansRequest::~BatchWriteSpansRequest() {
  // @@protoc_insertion_point(destructor:google.devtools.cloudtrace.v2.BatchWriteSpansRequest)
  SharedDtor();
}

void BatchWriteSpansRequest::SharedDtor() {
  name_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BatchWriteSpansRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchWriteSpansRequest::descriptor() {
  ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftracing_2eproto::
      protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftracing_2eproto::
      file_level_metadata[kIndexInFileMessages]
          .descriptor;
}

const BatchWriteSpansRequest& BatchWriteSpansRequest::default_instance() {
  ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftracing_2eproto::
      InitDefaultsBatchWriteSpansRequest();
  return *internal_default_instance();
}

BatchWriteSpansRequest* BatchWriteSpansRequest::New(
    ::google::protobuf::Arena* arena) const {
  BatchWriteSpansRequest* n = new BatchWriteSpansRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchWriteSpansRequest::Clear() {
  // @@protoc_insertion_point(message_clear_start:google.devtools.cloudtrace.v2.BatchWriteSpansRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  spans_.Clear();
  name_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool BatchWriteSpansRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.devtools.cloudtrace.v2.BatchWriteSpansRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
              this->name().data(), static_cast<int>(this->name().length()),
              ::google::protobuf::internal::WireFormatLite::PARSE,
              "google.devtools.cloudtrace.v2.BatchWriteSpansRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.devtools.cloudtrace.v2.Span spans = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
              input, add_spans()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.devtools.cloudtrace.v2.BatchWriteSpansRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.devtools.cloudtrace.v2.BatchWriteSpansRequest)
  return false;
#undef DO_
}

void BatchWriteSpansRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.devtools.cloudtrace.v2.BatchWriteSpansRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->name().data(), static_cast<int>(this->name().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "google.devtools.cloudtrace.v2.BatchWriteSpansRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        1, this->name(), output);
  }

  // repeated .google.devtools.cloudtrace.v2.Span spans = 2;
  for (unsigned int i = 0, n = static_cast<unsigned int>(this->spans_size());
       i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->spans(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
             ? _internal_metadata_.unknown_fields()
             : _internal_metadata_.default_instance()),
        output);
  }
  // @@protoc_insertion_point(serialize_end:google.devtools.cloudtrace.v2.BatchWriteSpansRequest)
}

::google::protobuf::uint8*
BatchWriteSpansRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.devtools.cloudtrace.v2.BatchWriteSpansRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->name().data(), static_cast<int>(this->name().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "google.devtools.cloudtrace.v2.BatchWriteSpansRequest.name");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .google.devtools.cloudtrace.v2.Span spans = 2;
  for (unsigned int i = 0, n = static_cast<unsigned int>(this->spans_size());
       i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(2, this->spans(static_cast<int>(i)),
                                    deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()),
            target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.devtools.cloudtrace.v2.BatchWriteSpansRequest)
  return target;
}

size_t BatchWriteSpansRequest::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:google.devtools.cloudtrace.v2.BatchWriteSpansRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()));
  }
  // repeated .google.devtools.cloudtrace.v2.Span spans = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->spans_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->spans(static_cast<int>(i)));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                          this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchWriteSpansRequest::MergeFrom(
    const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:google.devtools.cloudtrace.v2.BatchWriteSpansRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchWriteSpansRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<
          const BatchWriteSpansRequest>(&from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.devtools.cloudtrace.v2.BatchWriteSpansRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:google.devtools.cloudtrace.v2.BatchWriteSpansRequest)
    MergeFrom(*source);
  }
}

void BatchWriteSpansRequest::MergeFrom(const BatchWriteSpansRequest& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:google.devtools.cloudtrace.v2.BatchWriteSpansRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  spans_.MergeFrom(from.spans_);
  if (from.name().size() > 0) {
    name_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.name_);
  }
}

void BatchWriteSpansRequest::CopyFrom(const ::google::protobuf::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:google.devtools.cloudtrace.v2.BatchWriteSpansRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchWriteSpansRequest::CopyFrom(const BatchWriteSpansRequest& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:google.devtools.cloudtrace.v2.BatchWriteSpansRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchWriteSpansRequest::IsInitialized() const { return true; }

void BatchWriteSpansRequest::Swap(BatchWriteSpansRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchWriteSpansRequest::InternalSwap(BatchWriteSpansRequest* other) {
  using std::swap;
  spans_.InternalSwap(&other->spans_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchWriteSpansRequest::GetMetadata() const {
  protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftracing_2eproto::
      protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fdevtools_2fcloudtrace_2fv2_2ftracing_2eproto::
      file_level_metadata[kIndexInFileMessages];
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace cloudtrace
}  // namespace devtools
}  // namespace google

// @@protoc_insertion_point(global_scope)
