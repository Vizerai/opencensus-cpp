// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/devtools/cloudtrace/v2/tracing.proto

#include "google/devtools/cloudtrace/v2/tracing.grpc.pb.h"
#include "google/devtools/cloudtrace/v2/tracing.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace google {
namespace devtools {
namespace cloudtrace {
namespace v2 {

static const char* TraceService_method_names[] = {
    "/google.devtools.cloudtrace.v2.TraceService/BatchWriteSpans",
    "/google.devtools.cloudtrace.v2.TraceService/CreateSpan",
};

std::unique_ptr<TraceService::Stub> TraceService::NewStub(
    const std::shared_ptr< ::grpc::ChannelInterface>& channel,
    const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr<TraceService::Stub> stub(new TraceService::Stub(channel));
  return stub;
}

TraceService::Stub::Stub(
    const std::shared_ptr< ::grpc::ChannelInterface>& channel)
    : channel_(channel),
      rpcmethod_BatchWriteSpans_(TraceService_method_names[0],
                                 ::grpc::internal::RpcMethod::NORMAL_RPC,
                                 channel),
      rpcmethod_CreateSpan_(TraceService_method_names[1],
                            ::grpc::internal::RpcMethod::NORMAL_RPC, channel) {}

::grpc::Status TraceService::Stub::BatchWriteSpans(
    ::grpc::ClientContext* context,
    const ::google::devtools::cloudtrace::v2::BatchWriteSpansRequest& request,
    ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(
      channel_.get(), rpcmethod_BatchWriteSpans_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>*
TraceService::Stub::AsyncBatchWriteSpansRaw(
    ::grpc::ClientContext* context,
    const ::google::devtools::cloudtrace::v2::BatchWriteSpansRequest& request,
    ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory<
      ::google::protobuf::Empty>::Create(channel_.get(), cq,
                                         rpcmethod_BatchWriteSpans_, context,
                                         request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>*
TraceService::Stub::PrepareAsyncBatchWriteSpansRaw(
    ::grpc::ClientContext* context,
    const ::google::devtools::cloudtrace::v2::BatchWriteSpansRequest& request,
    ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory<
      ::google::protobuf::Empty>::Create(channel_.get(), cq,
                                         rpcmethod_BatchWriteSpans_, context,
                                         request, false);
}

::grpc::Status TraceService::Stub::CreateSpan(
    ::grpc::ClientContext* context,
    const ::google::devtools::cloudtrace::v2::Span& request,
    ::google::devtools::cloudtrace::v2::Span* response) {
  return ::grpc::internal::BlockingUnaryCall(
      channel_.get(), rpcmethod_CreateSpan_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::devtools::cloudtrace::v2::Span>*
TraceService::Stub::AsyncCreateSpanRaw(
    ::grpc::ClientContext* context,
    const ::google::devtools::cloudtrace::v2::Span& request,
    ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory<
      ::google::devtools::cloudtrace::v2::Span>::Create(channel_.get(), cq,
                                                        rpcmethod_CreateSpan_,
                                                        context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::devtools::cloudtrace::v2::Span>*
TraceService::Stub::PrepareAsyncCreateSpanRaw(
    ::grpc::ClientContext* context,
    const ::google::devtools::cloudtrace::v2::Span& request,
    ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory<
      ::google::devtools::cloudtrace::v2::Span>::Create(channel_.get(), cq,
                                                        rpcmethod_CreateSpan_,
                                                        context, request,
                                                        false);
}

TraceService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TraceService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler<
          TraceService::Service,
          ::google::devtools::cloudtrace::v2::BatchWriteSpansRequest,
          ::google::protobuf::Empty>(
          std::mem_fn(&TraceService::Service::BatchWriteSpans), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TraceService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler<
          TraceService::Service, ::google::devtools::cloudtrace::v2::Span,
          ::google::devtools::cloudtrace::v2::Span>(
          std::mem_fn(&TraceService::Service::CreateSpan), this)));
}

TraceService::Service::~Service() {}

::grpc::Status TraceService::Service::BatchWriteSpans(
    ::grpc::ServerContext* context,
    const ::google::devtools::cloudtrace::v2::BatchWriteSpansRequest* request,
    ::google::protobuf::Empty* response) {
  (void)context;
  (void)request;
  (void)response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TraceService::Service::CreateSpan(
    ::grpc::ServerContext* context,
    const ::google::devtools::cloudtrace::v2::Span* request,
    ::google::devtools::cloudtrace::v2::Span* response) {
  (void)context;
  (void)request;
  (void)response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

}  // namespace v2
}  // namespace cloudtrace
}  // namespace devtools
}  // namespace google
